{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "Python3相关梳理"}, "md/pep8/index.html": {"url": "md/pep8/index.html", "title": "PEP 8", "keywords": "", "body": "PEP8介绍PEP8是Python社群共通的风格指南，一开始是Python之父GuidovanRossum自己的撰码风格，慢慢后来演变至今，目的在于帮助开发者写出可读性高且风格一致的程式。许多开源项目，都是以PEP8为基础再加上自己的风格建议。这列出PEP8里面的重点，有兴趣可以直接看官方原文的文件会更清楚一些。1.缩进(Indentation)每层缩进使用4个空格2.断行风格风格良好：#断行首字母与开头的括号垂直对齐foo=long_function_name(var_one,var_two,var_three,var_four)#垂直缩进，首行不能有参数deflong_function_name(var_one,var_two,var_three,var_four):print(var_one)#垂直缩进，后面还有其它代码时，需要添加一层额外的缩进加以区别：foo=long_function_name(var_one,var_two,var_three,var_four)风格不良：#垂直缩进方式首行不能有参数foo=long_function_name(var_one,var_two,var_three,var_four)#垂直缩进，首行不能有参数；后面还有其它代码部分时，#断行要添加一层缩进，使其与其它代码部分能区别开来deflong_function_name(var_one,var_two,var_three,var_four):print(var_one)3.if条件断行if刚好有4个字符，相当于一层缩进。对于if条件断行，以下几种风格都可以：没有额外的缩进if(this_is_one_thingandthat_is_another_thing):do_something()添加一行注释，这将为编辑器支持语法高亮提供区分if(this_is_one_thingandthat_is_another_thing):#Sincebothconditionsaretrue,wecanfrobnicate.do_something()添加额外的缩进加以区分if(this_is_one_thingandthat_is_another_thing):do_something()4.多行的括号括号结束符与最后行的首字符对齐，如：my_list=[1,2,3,4,5,6,]result=some_function_that_takes_arguments(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,)括号结束符与首行的首字符对齐，如：my_list=[1,2,3,4,5,6,]result=some_function_that_takes_arguments(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,)上面两种排版的方式都可以5.使用Tab还是空格缩进用空格6.每行最长长度所有行都不超过80个字符限制编辑器视窗的宽度，使能并排同时打开多个文件。设置编辑器宽度(setwidthto80)，来避免wrapping对于较少结构限制的长文本（如docstrings或注释），行长应限制为72个字符。如果团队成员都同意使用长行，则可以将行长增加到不超过100个字符，但是docstrings和注释还必须为72个字符。有括号的长行可以用implicitcontinuation来断行，其它的可以用\\来断行，如：withopen(&#x27;/path/to/some/file/you/want/to/read&#x27;)asfile_1,\\open(&#x27;/path/to/some/file/being/written&#x27;,&#x27;w&#x27;)asfile_2:file_2.write(file_1.read())7.操作符要和操作数在一起#风格良好，这样很容易将操作符与操作数匹配：income=(gross_wages+taxable_interest+(dividends-qualified_dividends)-ira_deduction-student_loan_interest)#这种风格现今已不推荐使用了：income=(gross_wages+taxable_interest+(dividends-qualified_dividends)-ira_deduction-student_loan_interest)8.空行分隔模组中最顶层的函数和类定义都要用两行空行分隔类别中的方法定义用单行分隔要把一组相关的函数分组，可以用一些额外的空行函数中的逻辑区块可以加空行来分隔9.原始码的编码Python核心模组文件的编码都必须用UTF-8（Python2是ASCII）。使用默认的编码时（Python3:UTF-8，Python2:ASCII），不能使用编码声明标准库中，只有测试、作者名才能使用非默认的编码，其它情况下的非ASCII字符用\\x,\\u,\\u,\\N表示法表示。10.Import每行import只导入一个模组：#风格良好:importosimportsys#风格不良：importsys,os#风格良好：同一模组中的内容可以在同一行导入fromsubprocessimportPopen,PIPEimport语句要在文件的前面，在模组注释及docstrings之后，在模组全域变量和常量定义之前。import分组及导入顺序，每个分组之间用一行空行分隔标准库相关第三方库本地应用/库的特殊导入推荐使用绝对导入，如：importmypkg.siblingfrommypkgimportsiblingfrommypkg.siblingimportexample在比较覆杂的套件组成中，也可以用显式的相对导入，如：from.importsiblingfrom.siblingimportexample从一个模块中导入一个类别时，要显示拼写出类别名，如：frommyclassimportMyClassfromfoo.bar.yourclassimportYourClass如果与本地名称冲突，可以先导入模组：importmyclassimportfoo.bar.yourclass然后使用：myclass.MyClass和foo.bar.yourclass.YourClass。应该避免使用from&lt;module&gt;import*模组层级的特殊名称（如__all__)的位置：必须在模组的docstrings或注释之后，但在任何的import语句之前。from__future__比较特殊，Python强制该语句必须在docstrings或注释之后，因此风格如下：&quot;&quot;&quot;Thisistheexamplemodule.Thismoduledoesstuff.&quot;&quot;&quot;from__future__importbarry_as_FLUFL__all__=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]__version__=&#x27;0.1&#x27;__author__=&#x27;CardinalBiggles&#x27;importosimportsys11.字符引号(StringQuotes)单引号和双引号的功能是等同的。对于多行字符串，应该用双引号字符形式的三引号&quot;&quot;&quot;，以便与PEP257中的docstrings规范兼容12.表达式和语句中的空格(WhitespaceinExpressionsandStatements)()、[]、{}等括号内不要多余的空格，如：#风格良好：spam(ham[1],{eggs:2})#风格不良：spam(ham[1],{eggs:2}),、;、:之前不要有空格，如：#风格良好：ifx==4:printx,y;x,y=y,x#风格不良：ifx==4:printx,y;x,y=y,x在slice语句中的：实际上是一个二元操作符，因此其两侧的空格数必须相同；但当无slice参数时，两侧的空格可以都省略，如：#风格良好：ham[1:9],ham[1:9:3],ham[:9:3],ham[1::3],ham[1:9:]ham[lower:upper],ham[lower:upper:],ham[lower::step]ham[lower+offset:upper+offset]ham[:upper_fn(x):step_fn(x)],ham[::step_fn(x)]ham[lower+offset:upper+offset]#风格不良：ham[lower+offset:upper+offset]ham[1:9],ham[1:9],ham[1:9:3]ham[lower::upper]ham[:upper]函数调用的()及索引的[]前不要加空格，如：#风格良好：spam(1)dct[&#x27;key&#x27;]=lst[index]#风格不良：spam(1)dct[&#x27;key&#x27;]=lst[index]不要在赋值语句中加入额外的空格来对齐，如：#风格良好：x=1y=2long_variable=3#风格不良:x=1y=2long_variable=313.其它推荐风格任何行的行尾都不要有空白符。在二元操作符号两侧一般都要加一个空格，一般的二元操作符号如：赋值：=,+=,-=比较：==,&lt;,&gt;,!=,&lt;&gt;,&lt;=,&gt;=,in,notin,is,isnot布尔操作：and,or,not在分优先级的表达式中，在最低优先级的操作符两侧加一个空格，但至多只能加一个空格，如：#风格良好：x=x*2–1hypot2=x*x+y*yc=(a+b)*(ab)#风格不良：x=x*2–1hypot2=x*x+y*yc=(a+b)*(a–b)在关键字参数和默认参数值中的=两侧不要加空格，如：#风格良好：defcomplex(real,imag=0.0):returnmagic(r=real,i=imag)#风格不良：defcomplex(real,imag=0.0):returnmagic(r=real,i=imag)函数注解中的:前不要加空格，这符合:的常规风格，但是-&gt;两侧要加空格，如：#风格良好：defmunge(input:AnyStr):…defmunge()-&gt;AnyStr:…#风格不良：defmunge(input:AnyStr):…defmunge()-&gt;PosInt:…参数注解中，如果注解的参数有默认值，指定默认值的=两侧要加空格，如：#风格良好：defmunge(sep:AnyStr=None):…defmunge(input:AnyStr,sep:AnyStr=None,limit=1000):…#风格不良：defmunge(input:AnyStr=None):…defmunge(input:AnyStr,limit=1000):…不要将多条语句组合在一行中，如：#风格良好：iffoo==&#x27;blah&#x27;:do_blah_thing()do_one()do_two()do_three()#风格不良：iffoo==&#x27;blah&#x27;:do_blah_thing()do_one();do_two();do_three()如果if/for/while区块内的程式码很少，组合在一行有时还是可以接受的，但是不推荐，如：iffoo==&#x27;blah&#x27;:do_blah_thing()forxinlst:total+=xwhilet&lt;10:t=delay()#但是在有多段语句时，绝对不能这样，如：iffoo==&#x27;blah&#x27;:do_blah_thing()else:do_non_blah_thing()try:something()finally:cleanup()do_one();do_two();do_three(long,argument,list,like,this)iffoo==&#x27;blah&#x27;:one();two();three()14.注释(Comments)注释内容必须要和程式码相关！注释应该是完整的语句，首字母一般大写（英文），一般要有句号。注释很短时句号可以省略。区块注释一般由多个段落组成。用英文写注释14.1.区块注释(BlockComments)每行用#及一个空格开始段落用一个只有#的行分隔14.2.行内注释(InlineComments)注释与语句内容至少用两个空格分开，注释用#加一个空格开始#不要像下面这样，注释内容没有必要x=x+1#Incrementx#但是有时，如下面的注释会很有用x=x+1#Compensateforborder14.3.文档字串(DocumentationStrings)公开的模组、函数、类及方法都应该有文件字串，而非公开的方法可以用注释来代替，且注释放置在def行之后。多行的文件字串，结束符号要自成一行，如：&quot;&quot;&quot;ReturnafoobangOptionalplotzsaystofrobnicatethebizbazfirst.&quot;&quot;&quot;单行的文件字串，结束符号和内容放在同一行15.命名(NamingConventions)没有推荐的风格，但是别人要能从你的程式码中看出你用的是什么风格，常用的风格如下：b单个小写字母B单个大写字母lowercaselower_case_with_underscoresUPPERCASEUPPER_CASE_WITH_UNDERSCORESCapitalizedWords,这种风格中，对于缩写词应全部用大写，如HTTPServerError比HttpServerError好mixedCaseCapitalized_Words_With_Underscores，这个太丑，不要用这种！st_mode、st_mtime等前缀，一般是系统接口返回，如果自己写的程式码不推荐用这种_single_leading_underscore:弱内部使用指示器，这种对象用fromMimport*不会被导入single_trailing_underscore_:可以用来和Python关键词进行区分，如Tkinter.Toplevel(master,class_=&#x27;ClassName&#x27;)__double_leading_underscore:命名一个类属性时，可以进行命名矫正，例如classFooBar内的__boo会变成_FooBar__boodouble_leading_and_trailing_underscore:magic对象，不要自己发明这种对象15.1.命名习惯(Prescriptive:NamingConventions)不用单个l,O,I等这样的单个字符来命名，它们与数字1，0不好区分套件名和模组名：全部用小写，必要时可用_，但不推荐，C/C++的扩展模组，如果其对应有Python版本，那么C/C++扩展模组名前加_类别名：用CapWords风格异常名：用CapWords风格，一般应该有Error后缀全域变量名：能用fromMimport*导入的变量全部放在__all__中，或者全域变量用_做前缀函数名：应该用全部用小写，单词间可以用_分隔，如my_func，不推荐用mixedCase风格函数和方法的参数：实例方法的第一个参数用self,类别方法的第一个参数用cls，如果参数与关键字冲突，在参数名后加_后缀，如class_实例变量和方法：用小写字符和_,非公开的实例变量和方法用一个_做前缀；避免与子类别中的名字冲突，类的变量可用两个_作前缀，例如classFooBar内的__boo会变成只能通过FooBar._FooBar__boo读取常量：全部大写，可用_分隔，如MAX_OVERFLOW、TOTAL16.推荐的程式撰写方式(ProgrammingRecommendations)字符串连接不要用a+=b或者a=a+b,用.join(),后者性能更好。跟None的比较用is和isnot，不要用==，如果你想判断ifxisnotNone,不要缩写成ifx使用iffooisnotNone，而不是ifnotfooisNone，前者更加易读如果要实现序列比较操作的话，应将6个操作（__eq__,__ne__,__lt__,__le__,__gt__,__ge__）全部实现，可以借助functools.total_ordering()修饰器来减少工作量将函数保存在一个变量中应该用deff(x):return2*x，而非f=lambdax:2*x，后者不利于调试自定义的异常类应该继承至Exception类，而非BaseException类。Python2中抛出异常用raiseValueError(&#x27;message&#x27;)，而非raiseValueRoor,&#x27;message&#x27;尽量可以的指明异常名，如：try:importplatform_specific_moduleexceptImportError:platform_specific_module=None避免使用无异常名的except:语句，它会捕获全部的异常（如Ctrl+C）。将异常绑定到名字的方法：try:process_data()exceptExceptionasexc:raiseDataProcessingFailedError(str(exc))try:中的语句要尽量减少，如：#风格良好：try:value=collection[key]exceptKeyError:returnkey_not_found(key)else:returnhandle_value(value)#风格不良try:#Toobroad!returnhandle_value(collection[key])exceptKeyError:#WillalsocatchKeyErrorraisedbyhandle_value()returnkey_not_found(key)如果资源只适用于某个代码段内，使用with或try/finally来确保能进行清理工作上下文管理器应用通过一个单独的函数或方法来呼叫，如：#风格良好：withconn.begin_transaction():do_stuff_in_transaction(conn)#风格不良：withconn:do_stuff_in_transaction(conn)return语句应该一致，如：#风格良好：deffoo(x):ifx&gt;=0:returnmath.sqrt(x)else:returnNonedefbar(x):ifx&lt;0:returnNonereturnmath.sqrt(x)#风格不良：deffoo(x):ifx&gt;=0:returnmath.sqrt(x)defbar(x):ifx&lt;0:returnreturnmath.sqrt(x)使用字符串的方法，而不是用string模组中的方法使用.startswith()和.endswidth()而不用slicing来检查前缀和后缀：#风格良好：iffoo.startswith(&#x27;bar&#x27;):#风格不良：iffoo[:3]==&#x27;bar&#x27;:判断对象的类型用isinstance而不直接type比较，如：#风格良好：ifisinstance(obj,int):#风格不良:iftype(obj)istype(1):对序列是否空的判断不用len，如：#风格良好：ifnotseq:ifseq:#风格不良：iflen(seq):ifnotlen(seq):布尔值的比较：#风格良好：ifgreeting:#不要这样:ifgreeting==True:#这样更不行：ifgreetingisTrue:"}, "md/re/re_model.html": {"url": "md/re/re_model.html", "title": "正则表达式", "keywords": "", "body": "Python正则学习参考官方文档正则表达式RegularExpression的主要功能是从字符串（string）中通过特定的模式，搜索希望找到的内容。1.rePython中可以使用包re来处理正则表达式。下面是一个简单的应用，目的是找到字符串中的数字：importrem=re.search(&quot;[0-9]&quot;,&quot;ab5cd4ef&quot;)print(m.group())re.search()接收两个参数，第一个参数[0-9]就是我们所说的正则表达式，它告诉Python，听着，我想从字符串中找从0到9的任意一个数字字符。re.search()如果从第二个参数中找到符合要求的子字符串，就返回一个对象m，你可以通过m.group()的方法查看搜索到的结果。如果没有找到符合要求的字符，则re.search()会返回None。除了search()方法外，re包还提供了其他搜索方法，它们的功能有所差别：#搜索整个字符串，直到发现符合的子字符串，如果没有发现返回Nonem=re.search(pattern,string)#从头开始检查字符串是否符合正则表达式。#必须从字符串的第一个字符开始就相符m=re.match(pattern,string)我们可以从这两个函数中选择一个进行搜索。上面的例子中，如果使用re.match()的话，则会得到None，因为字符串的起始为a，不符合[0-9]的要求。再一次，我们可以使用m.group()来查看找到的字符串。我们还可以在搜索之后将搜索到的子字符串进行替换。下面的sub()利用正则pattern在字符串string中进行搜索。对于搜索到的字符串，用另一个字符串replacement进行替换。函数将返回替换后的字符串：str=re.sub(pattern,replacement,string)此外，常用的方法还有#根据正则表达式分割字符串，将分割后的所有子字符串#放在一个列表(list)中返回re.split()#根据正则表达式搜索字符串，将所有符合条件的子字符串#放在一个列表(list)中返回re.findall()如何写正则表达式正则表达式的功能其实非常强大，关键在于如何写出有效的正则表达式。我们先看正则表达式的常用语法。正则表达式用某些符号代表单个字符：.任意的一个字符a|b字符a或字符b[afg]a或者f或者g中的一个字符[0-4]0-4范围内的一个字符[a-f]a-f范围内的一个字符[^m]不是m的一个字符\\s一个空格\\S一个非空格\\d一个数字，相当于[0-9]\\D一个非数字，相当于[^0-9]\\w任何语言单词的一部分的字符，以及数字和下划线\\W匹配任何不是单词字符的字符正则表达式还可以用某些符号来表示某种形式的重复，这些符号紧跟在单个字符之后，就表示多个这样类似的字符*重复超过0次或更多次，尽量多的匹配字符串。+重复1次或超过1次?重复0次或1次{m}重复m次。比如，a{4}相当于aaaa，再比如，[1-3]{2}相当于[1-3][1-3]{m,n}重复m到n次。比如说a{2,5}表示a重复2到5次。小于m次的重复，或者大于n次的重复都不符合条件*?,+?,??*,+，和?修饰符都是贪婪的；它们在字符串进行尽可能多的匹配。有时候并不需要这种行为。如果正则式&lt;.*&gt;希望找到&lt;a&gt;b&lt;c&gt;，它将会匹配整个字符串，而不仅是&lt;a&gt;。在修饰符之后添加?将使样式以非贪婪方式进行匹配；尽量少的字符将会被匹配。使用正则式&lt;.*?&gt;将会仅仅匹配&lt;a&gt;{m,n}?非贪婪模式，只匹配尽量少的字符次数。比如，对于aaaaaa，a{3,5}匹配5个a，而a{3,5}?只匹配3个a。|或者，A|B，A或B，绝不贪婪下面是重复符号的例子：正则表达相符的字符串举例不相符字符串举例[0-9]{3,5}&quot;9678&quot;&quot;12&quot;&quot;1234567&quot;a?b&quot;b&quot;&quot;ab&quot;&quot;cb&quot;&quot;ac&quot;a+b&quot;aaaaab&quot;&quot;b&quot;最后，还有位置相关的符号：^字符串的起始位置$字符串的结尾位置下面是位置符号的一些例子：正则表达相符的字符串举例不相符的字符串^ab.*c$abeeccabeec信息提取有的时候，我们想在搜索的同时，对结果进一步提炼。比如说，我们从下面一个字符串中提取信息：s=&quot;abcd_output_1994_abcd_1912_abcd&quot;如果我们把正则表达式写成：&quot;output_\\d{4}&quot;那么用search()方法可以找到output_1994。但如果我们想进一步提取出1994本身，则可以在正则表达式上给目标加上括号：output_(\\d{4})括号()包围了一个小的正则表达式\\d{4}。这个小的正则表达式能从结果中进一步筛选信息，即四位的阿拉伯数字。用括号()圈起来的正则表达式的一部分，称为群（group）。一个正则表达式中可以有多个群。我们可以group(number)的方法来查询群。需要注意的是，group(0)是整个正则表达的搜索结果。group(1)是第一个群，以此类推：importrem=re.search(r&quot;output_(\\d{4})&quot;,&quot;output_1986.txt&quot;)print(m.group(1))#将找到4个数字组成的1986我们还可以将群命名，以便更好地使用group查询：importrem=re.search(r&quot;output_(?P&lt;year&gt;\\d{4})&quot;,&quot;output_1986.txt&quot;)#(?P&lt;name&gt;...)为group命名print(m.group(&quot;year&quot;))#打印1986上面的(?P&lt;year&gt;…)括住了一个群，并把它命名为year。用这种方式来产生群，就可以通过year这个键来提取结果。1.正则表达式对象以上都是直接通过正则表达式来进行操作，很多时候为了更方便应用正则表达式，会将正则表达式的样式编译为一个正则表达式对象（正则对象），可以用于匹配，通过这个对象的方法进行操作，在特定情况下使正则应用更加高效。pattern=re.compile(r&quot;output_(\\d{4})&quot;)pattern.search(&quot;output_1986.txt&quot;)pattern.search(&quot;output_1986.txt&quot;).group(1)2.多行搜索re.findall(r&quot;^wo.*&quot;,&quot;hello\\nworld\\nworldhello&quot;)re.findall(r&quot;^wo.*&quot;,&quot;hello\\nworld\\nworldhello&quot;,flags=re.M)3.忽略大小写re.findall(r&quot;^wo.*&quot;,&quot;hello\\nworld\\nWorldhello&quot;,flags=re.M)re.findall(r&quot;^wo.*&quot;,&quot;hello\\nworld\\nWorldhello&quot;,flags=(re.M+re.I))"}, "md/re/jsonschema.html": {"url": "md/re/jsonschema.html", "title": "json 模式校验", "keywords": "", "body": "jsonschema模式校验https://python-jsonschema.readthedocs.io/en/latest/pipinstalljsonschema-ihttps://mirrors.aliyun.com/pypi/simple/1.什么是模式https://json-schema.org/understanding-json-schema/about.html如果你曾经使用过XMLSchema，RelaxNG或ASN.1，那么你可能已经知道什么是模式，并且可以高兴地跳到下一节。如果你听起来像个傻瓜，那你来对地方了。要定义什么是JSON模式，我们可能应该首先定义什么是JSON。JSON代表JavaScript对象表示法，这是一种简单的数据交换格式。它最初是作为万维网的一种表示法。由于大多数网络浏览器中都存在JavaScript，并且JSON基于JavaScript，因此很容易在其中进行支持。但是，它已经被证明足够有用和足够简单，现在可以在许多不涉及网络冲浪的情况下使用它。JSON本质上是基于以下数据结构构建的：object:{&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;}array:[&quot;first&quot;,&quot;second&quot;,&quot;third&quot;]number:423.1415926string:&quot;Thisisastring&quot;boolean:truefalsenull:null这些类型在大多数编程语言中都有类似物，尽管它们的名称可能不同。下表从JavaScript类型的名称映射到Python中的类似类型：JavaScriptPythonstringstringnumberint/floatobjectdictarraylistbooleanboolnullNoneJavaScript没有针对整数和浮点数的单独类型。使用这些简单的数据类型，可以表示所有类型的结构化数据。但是，随着灵活性的提高，责任也就增加了，因为同一概念可以用多种方式表示。例如，你可以想象以不同的方式用JSON表示有关一个人的信息：{&quot;姓名&quot;:&quot;张三&quot;,&quot;出生日期&quot;:&quot;1990年01月01日&quot;,&quot;地址&quot;:&quot;中国广东省深圳市宝安区&quot;}{&quot;姓&quot;:&quot;张&quot;,&quot;名&quot;:&quot;三&quot;,&quot;出生日期&quot;:&quot;1990-01-01&quot;,&quot;地址&quot;:{&quot;国家&quot;:&quot;中国&quot;,&quot;省&quot;:&quot;广东省&quot;,&quot;市&quot;:&quot;深圳市&quot;,&quot;区&quot;:&quot;宝安区&quot;}}两种陈述都同样有效，尽管其中一种显然比另一种更为正式。记录的设计将在很大程度上取决于其在应用程序中的预期用途，因此这里没有正确或错误的答案。但是，当应用程序说“给我一个人的JSON记录”时，准确知道该记录的组织方式非常重要。例如，我们需要知道需要哪些字段以及如何表示值。这就是JSONSchema的来源。以下JSONSchema片段描述了上面第二个示例的结构。现在不必担心太多细节。在随后将对它们进行说明。{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;姓&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;名&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;出生日期&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;format&quot;:&quot;date&quot;},&quot;地址&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;国家&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;省&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;市&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;区&quot;:{&quot;type&quot;:&quot;string&quot;}}}}}通过针对该模式“验证”第一个示例，你可以看到它失败了。但是，第二个示例通过了：你可能已经注意到JSONSchema本身是用JSON编写的。它是数据本身，而不是计算机程序。它只是“描述其他数据的结构”的声明性格式。这既是它的强项，也是它的弱项（与其他类似的模式语言共享）。简明扼要地描述数据的表面结构，并根据它自动进行数据验证很容易。但是，由于JSON模式不能包含任意代码，因此无法表达的数据元素之间的关系受到某些限制。因此，任何用于足够复杂的数据格式的“验证工具”都可能具有两个验证阶段：一个在模式（或结构）级别，另一个在语义级别。后者检查可能需要使用更通用的编程语言来实现。2.总纲https://www.jsonschema.net/home3.JSON模式参考https://json-schema.org/understanding-json-schema/reference/index.html3.1.特定类型的关键字字符串：string数值类型：integer、number、Multiples、Range对象：object数组：array布尔值：boolean空：null{&quot;type&quot;:&quot;number&quot;}//成功：10、20.5//失败：&quot;10&quot;{&quot;type&quot;:[&quot;number&quot;,&quot;string&quot;]}//成功：10、20.5、&quot;10&quot;、&quot;你好&quot;//失败：[1,2,3]type关键字可以是一个字符串或数组：如果是字符串，则为上述基本类型之一的名称。如果是数组，则必须是字符串数组，其中每个字符串是一种基本类型的名称，并且每个元素都是唯一的。在这种情况下，如果JSON代码段与任何给定类型匹配，则该代码段有效。3.2.正则表达式该模式和模式属性关键字使用正则表达式来表示约束。使用的正则表达式语法来自JavaScript（尤其是ECMA262）。但是，不完全支持完整的语法，因此建议你坚持下面描述的该语法的子集。单个unicode字符（下面的特殊字符除外）与自己匹配。.：匹配除换行符以外的任何字符。（请注意，组成换行符的内容在某种程度上取决于你的平台和语言环境，但实际上这并不重要）。^：仅在字符串开头匹配。$：仅在字符串末尾匹配。(...)：将一系列正则表达式分组为一个正则表达式。|：匹配|符号之前或之后的正则表达式。[abc]：匹配方括号内的任何字符。[a-z]：匹配字符范围。[^abc]：匹配未列出的任何字符。[^a-z]：匹配范围之外的任何字符。+：匹配前一个正则表达式的一个或多个重复。*：匹配零个或多个前面的正则表达式重复。?：匹配前一个正则表达式的零个或一个重复。+?，*?，??：的*，+和?预选赛都是贪婪的；它们匹配尽可能多的文本。有时，这种行为是不希望的，并且你想要匹配的字符越少越好。(?!x)，(?=x)：阴性和阳性预测先行。{x}：精确x匹配前面的正则表达式的出现。{x,y}：至少匹配x并且最多y匹配前面的正则表达式。{x,}：匹配x出现的一个或多个前面的正则表达式。{x}?，{x,y}?，{x,}?：上述表达式的非贪婪版本。腾讯QQ号：纯数字，至少5位{&quot;type&quot;:&quot;string&quot;,&quot;pattern&quot;:&quot;^[1-9][0-9]{4,}$&quot;}3.3.数值类型integerinteger类型用于整数。在Python中，类似于该int类型。{&quot;type&quot;:&quot;integer&quot;}numbernumber类型可用于任何数字类型，整数或浮点数。在Python中，类似于float类型。{&quot;type&quot;:&quot;number&quot;}MultiplesmultipleOf关键字可以将数字限制为给定数字的倍数。可以将其设置为任何正数。{&quot;type&quot;:&quot;number&quot;,&quot;multipleOf&quot;:10}Range数字范围是使用minimum与maximum关键字（或exclusiveMinimum和exclusiveMaximum用于表示互斥范围）的组合来指定的。如果x是要验证的值，则以下条件必须为true：X≥minimumx&gt;exclusiveMinimumX≤maximumx&lt;exclusiveMaximum虽然我们可以同时指定的minimum和exclusiveMinimum或两者的maximum和exclusiveMaximum，它并没有真正意义的做到这一点。{&quot;type&quot;:&quot;number&quot;,&quot;minimum&quot;:0,&quot;exclusiveMaximum&quot;:100}//取值：0-99排除1003.4.对象对象是JSON中的映射类型。他们将“键”映射到“值”。在JSON中，“键”必须始终为字符串。这些对中的每对通常都称为“属性”。在Python中，“对象”类似于dict类型。但是，一个重要的区别是，尽管Python词典可以使用任何不可变对象作为键，但在JSON中，所有键都必须是字符串。尽量不要被“对象”一词的两种用法所混淆：Python使用该词object来表示所有事物的通用基类，而在JSON中，它仅用于表示从字符串键到值的映射。{&quot;type&quot;:&quot;object&quot;}//类型为字典，key为字符串属性properties关键字定义对象上的属性（键值对）的值是一个对象，其中每个键是属性的名称，每个值是用于验证该属性的JSON模式。例如，假设我们要为由数字，街道名称和街道类型组成的地址定义一个简单的模式：{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}}}//成功：{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123}、{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123,&quot;区&quot;:&quot;宝安区&quot;}//失败：{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:&quot;123&quot;}additionalProperties关键字用于控制的额外的东西，默认情况下，允许任何其他属性。如果additionalProperties为boolean并将其设置为false，则不允许使用其他属性。{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;additionalProperties&quot;:false}//成功：{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123}//失败：{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:&quot;123&quot;}、{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123,&quot;区&quot;:&quot;宝安区&quot;}必须的属性required关键字可以指定必须存在的属性。{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;姓名&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;姓名&quot;,&quot;街道&quot;]}//成功：{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123,&quot;区&quot;:&quot;宝安区&quot;}//失败：{&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:&quot;123&quot;}属性数量minProperties和maxProperties关键字限制对象上的属性数量。每个参数都必须是非负整数。{&quot;type&quot;:&quot;object&quot;,&quot;minProperties&quot;:2,&quot;maxProperties&quot;:3}//成功：{&quot;a&quot;:0,&quot;b&quot;:1}、{&quot;a&quot;:0,&quot;b&quot;:1,&quot;c&quot;:2}//失败：{}、{&quot;a&quot;:0}、{&quot;a&quot;:0,&quot;b&quot;:1,&quot;c&quot;:2,&quot;d&quot;:3}依赖dependencies关键字允许基于某些特殊属性是变化的模式。JSON模式中有两种形式的依赖关系：属性依赖项声明如果存在给定的属性，则必须存在某些其他属性。模式依赖项声明存在给定属性时模式会更改。比如，如果街道存在时，楼号也必须存在。{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;姓名&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;姓名&quot;],&quot;dependencies&quot;:{&quot;街道&quot;:[&quot;楼号&quot;]}}//成功：{&quot;姓名&quot;:&quot;张三&quot;}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;楼号&quot;:123}//失败：{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;}当然也可以明确定义双向依赖性{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;姓名&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;姓名&quot;],&quot;dependencies&quot;:{&quot;街道&quot;:[&quot;楼号&quot;],&quot;楼号&quot;:[&quot;街道&quot;]}}//成功：{&quot;姓名&quot;:&quot;张三&quot;}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123}//失败：{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;楼号&quot;:123}模式依赖模式依赖项的工作方式类似于属性依赖项，但是它们不仅可以指定其他必需的属性，还可以扩展模式使其具有其他约束。{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;姓名&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;街道&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;姓名&quot;],&quot;dependencies&quot;:{&quot;街道&quot;:{&quot;properties&quot;:{&quot;楼号&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;楼号&quot;]}}}//成功：{&quot;姓名&quot;:&quot;张三&quot;}、{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;,&quot;楼号&quot;:123}//失败：{&quot;姓名&quot;:&quot;张三&quot;,&quot;街道&quot;:&quot;新安街道&quot;}3.5.数组数组用于有序元素。在JSON中，数组中的每个元素都可以具有不同的类型。JSON中通常使用两种方式使用数组：列表验证：任意长度的序列，其中每个项目都匹配相同的模式。元组验证：固定长度的序列，其中每个项目可能具有不同的模式。在这种用法中，每个项目的索引（或位置）对于如何解释该值都是有意义的。列表验证定义数组中的每个项目都是一个数字：{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;type&quot;:&quot;number&quot;}}//成功：[1,2,3,4,5]、[]//失败：[1,2,&quot;3&quot;,4,5]items模式必须对数组中的每个项目都有效，但是contains模式仅需要针对数组中的一个或多个项目进行验证。{&quot;type&quot;:&quot;array&quot;,&quot;contains&quot;:{&quot;type&quot;:&quot;number&quot;}}//成功：[1,2,3,4,5]、[&quot;a&quot;,4,&quot;b&quot;]//失败：[&quot;a&quot;,&quot;b&quot;]元组验证当数组是项目的集合时，其中每个项目具有不同的模式并且每个项目的序号索引都有意义，则元组验证很有用。比如一个描述地理位置的元组：[街道,经度,维度,朝向]街道：必须是字符串经度：必须是数字纬度：必须是数字朝向：只能是东南西北{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;[{&quot;type&quot;:&quot;string&quot;},{&quot;type&quot;:&quot;number&quot;},{&quot;type&quot;:&quot;number&quot;},{&quot;type&quot;:&quot;string&quot;,&quot;enum&quot;:[&quot;东&quot;,&quot;南&quot;,&quot;西&quot;,&quot;北&quot;]}]}长度可以使用minItemsmaxItems关键字指定数组的长度。每个关键字的值必须为非负数。{&quot;type&quot;:&quot;array&quot;,&quot;minItems&quot;:2,&quot;maxItems&quot;:3}//成功：[1,2]、[1,2,3]//失败：[]、[1]、[1,2,3,4]唯一可以确保数组中的每个项目都是唯一的。只需将uniqueItems关键字设置为即可true。{&quot;type&quot;:&quot;array&quot;,&quot;uniqueItems&quot;:true}//成功：[1,2,3,4]、[]//失败：[1,2,3,1]3.6.布尔值布尔类型仅匹配两个特殊值：true和false。{&quot;type&quot;:&quot;boolean&quot;}//成功：true、false//失败：&quot;true&quot;、03.7.空空类型通常用于表示缺失值。当模式指定atype时null，它只有一个可接受的值：null。{&quot;type&quot;:&quot;null&quot;}//成功：null//失败：false、0、&quot;&quot;"}, "md/py3总结.html": {"url": "md/py3总结.html", "title": "Python 3 总结", "keywords": "", "body": "Python3总结版本：1.0.0请下载PDF查看或打印如文中有错乱点，请邮件联系我，谢谢！Email:liushilive@outlook.com"}, "md/py速记.html": {"url": "md/py速记.html", "title": "Python 速记", "keywords": "", "body": "Python速记author：刘士date：2019年6月13日#单行注释由一个井号开头。&quot;&quot;&quot;三个双引号（或单引号）之间可以写多行字符串，通常用来写文档注释。&quot;&quot;&quot;1.基本数据类型和操作符type()查看类型type(3)数字就是数字123算数运算与常识中的保持一致1+1#=&gt;28-1#=&gt;710*2#=&gt;205/2#=&gt;2.5整除有一点棘手。对于整除来说，计算结果会自动取整。5//2#=&gt;2求余用%10%3#=&gt;1求乘方用**3**2#=&gt;9使用小括号来强制计算的优先顺序(1+3)*2#=&gt;8布尔值也是基本数据类型TrueFalse使用not来取反notTrue#=&gt;FalsenotFalse#=&gt;True等式判断用==1==1#=&gt;True2==1#=&gt;False不等式判断是用!=1!=1#=&gt;False2!=1#=&gt;True还有更多的判断运算1&lt;10#=&gt;True1&gt;10#=&gt;False2&lt;=2#=&gt;True2&gt;=2#=&gt;True居然可以把判断运算串连起来！1&lt;2&lt;3#=&gt;True2&lt;3&lt;2#=&gt;False2&lt;3==2#=&gt;False2&lt;3&gt;1#=&gt;True使用&quot;或&#x27;来创建字符串&quot;这是一个字符串.&quot;&#x27;这也是一个字符串.&#x27;字符串也可以相加！&quot;Hello&quot;+&quot;world!&quot;#=&gt;&quot;Helloworld!&quot;一个字符串可以视为一个特殊的元祖（后面讲到）&quot;Thisisastring&quot;[0]#=&gt;&#x27;T&#x27;%可以用来格式化字符串，就像这样：&quot;%s是%s&quot;%(&quot;字符串&quot;,&quot;特殊的元祖&quot;)后来又有一种格式化字符串的新方法：format方法。我们推荐使用这个方法。&quot;{}canbe{}&quot;.format(&quot;strings&quot;,&quot;formatted&quot;)如果你不喜欢，还可以使用f-string。name=&quot;李四&quot;food=&quot;土豆&quot;f&quot;{name}想要吃{food}&quot;None是一个对象，表示空数据None#=&gt;None不要使用相等符号==来把对象和None进行比较，而要用is。&quot;etc&quot;isNone#=&gt;FalseNoneisNone#=&gt;True&#x27;&#x27;isNone#=&gt;False&#x27;&#x27;isnotNone#=&gt;True#这个`is`操作符用于比较两个对象的标识。#（对象一旦建立，其标识就不会改变，可以认为它就是对象的编号。）#在处理基本数据类型时基本用不上，#但它在处理对象时很有用。#查询对象的编号用ida=10id(a)id(10)0等于False1等于True0==False#=&gt;True1==True#=&gt;True2==True#=&gt;False2.变量和集合打印输出很简单print(&quot;我是Python&quot;)变量命名规则第一个字符必须是字母、下划线（_）、Unicode字符（中文）。标识符的其他部分可以有字母、下划线、数字、Unicode字符组成。标识符严格区分大小写标识符名称不允许为关键字（保留关键字35个）。importkeywordkeyword.kwlist标识符建议为有意义的命名。在赋值给变量之前不需要声明some_var=5#变量名的约定是使用下划线分隔的小写单词some_var#=&gt;5访问一个未赋值的变量会产生一个异常。some_other_var#会抛出一个名称错误if可以作为表达式来使用&quot;你好!&quot;if3&gt;2else2#=&gt;&quot;你好!&quot;&quot;你好!&quot;if3==2else2#=&gt;23.列表列表用于存储序列li=[]我们先尝试一个预先填充好的列表other_li=[4,5,6]3.1.列表常用方法使用append方法把元素添加到列表的尾部li.append(1)#li现在是[1]li.append(2)#li现在是[1,2]li.append(4)#li现在是[1,2,4]li.append(3)#li现在是[1,2,4,3]使用pop来移除最后一个元素li.pop()#=&gt;3，然后li现在是[1,2,4]我们再把它放回去li.append(3)#li现在又是[1,2,4,3]了像访问其它语言的数组那样访问列表li[0]#=&gt;1查询最后一个元素li[-1]#=&gt;3越界查询会产生一个索引错误li[4]#抛出一个索引错误你可以使用切片语法来查询列表的一个范围。（这个范围相当于数学中的左闭右开区间。）li[1:3]#=&gt;[2,4]省略开头li[2:]#=&gt;[4,3]省略结尾li[:3]#=&gt;[1,2,4]li【开始：结束：步长】li=[1,2,4,3]li[0:3:2]#=&gt;[1,4]使用del来删除列表中的任意元素delli[2]#li现在是[1,2,3]可以把列表相加li+other_li#=&gt;[1,2,3,4,5,6]-请留意li和other_li并不会被修改使用extend来合并列表li.extend(other_li)#现在li是[1,2,3,4,5,6]用in来检查是否存在于某个列表中1inli#=&gt;True用len来检测列表的长度len(li)#=&gt;64.元组很像列表，但它是不可变的tup=(1,2,3)tup[0]#=&gt;1tup[0]=3#抛出一个类型错误创建只有一个元素的元组tup1=(1,)操作列表的方式通常也能用在元组身上len(tup)#=&gt;3tup+(4,5,6)#=&gt;(1,2,3,4,5,6)tup[:2]#=&gt;(1,2)2intup#=&gt;True你可以把元组（或列表）中的元素解包赋值给多个变量a,b,c=(1,2,3)#现在a是1，b是2，c是3如果你省去了小括号，那么元组会被自动创建d,e,f=4,5,6再来看看交换两个值是多么简单。e,d=d,e#现在d是5而e是45.序列的方法下面的内建函数(built-infunction)可用于序列（列表，元组，字符串）:s为一个序列函数含义len(s)返回：序列中包含元素的个数min(s)返回：序列中最小的元素max(s)返回：序列中最大的元素all(s)返回：True,如果所有元素都为True的话any(s)返回：True,如果任一元素为True的话下面的方法主要起查询功能，不改变序列本身，可用于列表和元组：函数含义sum(s)返回：序列中所有元素的和x为元素值，i为下标（元素在序列中的位置）函数含义s.count(x)返回：x在s中出现的次数s.index(x)返回：x在s中第一次出现的下标由于元组的元素不可变更，下面方法只适用于列表：A为一个列表，B为另一个列表函数含义A.extend(B)在列表l的末尾添加列表l2的所有元素A.append(x)在l的末尾附加x元素A.sort()对l中的元素大小排序A.reverse()将l中的元素按照原始顺序倒序排列A.pop()返回：列表l的最后一个元素，并在列表l中删除该元素dell1[i]删除该元素（以上这些方法都是在原来的列表的上进行操作，会对原来的列表产生影响，而不是返回一个新列表。)下面是一些用于字符串的方法。尽管字符串是元组的特殊的一种，但字符串(string)类有一些方法是改变字符串的。这些方法的本质不是对原有字符串进行操作，而是删除原有字符串，再建立一个新的字符串，所以并不与元组的特点相矛盾。str为一个字符串，sub为str的一个子字符串。s为一个序列，它的元素都是字符串。width为一个整数，用于说明新生成字符串的宽度。函数含义str.count(sub)返回：sub在str中出现的次数str.find(sub)返回：从左开始，查找sub在str中第一次出现的位置。如果str中不包含sub，返回-1str.index(sub)返回：从左开始，查找sub在str中第一次出现的位置。如果str中不包含sub，返回错误str.split([sep,[max]])返回：从左开始，以空格为分割符(separator)，将str分割为多个子字符串，总共分割max次。将所得的子字符串放在一个列表中返回。可以str.split(',')的方式使用逗号或者其它分割符str.rsplit([sep,[max]])返回：从右开始，以空格为分割符(separator)，将str分割为多个子字符串，总共分割max次。将所得的子字符串放在一个列表中返回。可以str.rsplit(',')的方式使用逗号或者其它分割符str.join(s)返回：将s中的元素，以str为分割符，合并成为一个字符串。str.strip([sub])返回：去掉字符串开头和结尾的空格与特殊字符。也可以提供参数sub，去掉位于字符串开头和结尾的substr.replace(sub,new_sub)返回：用一个新的字符串new_sub替换str中的substr.capitalize()返回：将str第一个字母大写str.lower()返回：将str全部字母改为小写str.upper()返回：将str全部字母改为大写str.swapcase()返回：将str大写字母改为小写，小写改为大写6.字典用于存储映射关系empty_dict={}#空字典这是一个预先填充的字典filled_dict={&quot;one&quot;:1,&quot;two&quot;:2,&quot;three&quot;:3}使用[]来查询键值filled_dict[&quot;one&quot;]#=&gt;1将字典的所有键名获取为一个列表filled_dict.keys()#=&gt;[&quot;three&quot;,&quot;two&quot;,&quot;one&quot;]将字典的所有键值获取为一个列表filled_dict.values()#=&gt;[3,2,1]使用in来检查一个字典是否包含某个键名&quot;one&quot;infilled_dict#=&gt;True1infilled_dict#=&gt;False查询一个不存在的键名会产生一个键名错误filled_dict[&quot;four&quot;]#键名错误所以要使用get方法来避免键名错误filled_dict.get(&quot;one&quot;)#=&gt;1filled_dict.get(&quot;four&quot;)#=&gt;Noneget方法支持传入一个默认值参数，将在取不到值时返回。filled_dict.get(&quot;one&quot;,4)#=&gt;1filled_dict.get(&quot;four&quot;,4)#=&gt;4修改字典的值filled_dict[&quot;one&quot;]=111Setdefault方法可以安全地把新的名值对添加到字典里filled_dict.setdefault(&quot;five&quot;,5)#filled_dict[&quot;five&quot;]被设置为5filled_dict.setdefault(&quot;five&quot;,6)#filled_dict[&quot;five&quot;]仍然为57.set用于保存集合empty_set=set()#空集合初始化只有一个元素的集合set1=set([1])set2={1}使用一堆值来初始化一个集合some_set=set([1,2,2,3,4])#some_set现在是set([1,2,3,4])从Python2.7开始，{}可以用来声明一个集合filled_set={1,2,2,3,4}#=&gt;{1,2,3,4}#（注：集合是种无序不重复的元素集，因此重复的2被滤除了。）#（注：{}不会创建一个空集合，只会创建一个空字典。）把更多的元素添加进一个集合filled_set.add(5)#filled_set现在是{1,2,3,4,5}使用&amp;来获取交集other_set={3,4,5,6}filled_set&amp;other_set#=&gt;{3,4,5}使用|来获取并集filled_set|other_set#=&gt;{1,2,3,4,5,6}使用-来获取补集{1,2,3,4}-{2,3,5}#=&gt;{1,4}使用in来检查是否存在于某个集合中2infilled_set#=&gt;True10infilled_set#=&gt;False8.强制类型转换str-&gt;intint(&#x27;123&#x27;)int-&gt;strstr(123)list-&gt;setset([1,2,3,4,5])set-&gt;listlist({1,2,3,4,5})list-&gt;tupletuple([1,2,3,4,5])tuple-&gt;listlist((1,2,3,4,5))9.控制流我们先创建一个变量some_var=5这里有一个条件语句。缩进在Python中可是很重要的哦！程序会打印出some_var比10小ifsome_var&gt;10:print(&quot;some_var完全比10大.&quot;)elifsome_var&lt;10:#这里的elif子句是可选的print(&quot;some_var比10小.&quot;)else:#这一句也是可选的print(&quot;some_var就是10.&quot;)for循环可以遍历列表&quot;&quot;&quot;如果要打印出：dog是哺乳动物cat是哺乳动物mouse是哺乳动物&quot;&quot;&quot;foranimalin[&quot;dog&quot;,&quot;cat&quot;,&quot;mouse&quot;]:print(f&#x27;{animal}是哺乳动物&#x27;)&quot;&quot;&quot;&#x27;range(数字)&#x27;会返回一个数字列表，这个列表将包含从零到给定的数字。如果要打印出：0123&quot;&quot;&quot;foriinrange(4):print(i)while循环会一直继续，直到条件不再满足。&quot;&quot;&quot;如果要打印出：0123&quot;&quot;&quot;x=0whilex&lt;4:print(x)x+=1#这是x=x+1的简写方式跳过或终止循环continue#跳过循环的这一次执行，进行下一次的循环操作break#停止执行整个循环使用try/except代码块来处理异常try:#使用raise来抛出一个错误raiseIndexError(&quot;Thisisanindexerror&quot;)#抛出一个索引错误：这是一个索引错误。exceptIndexErrorase:pass#pass只是一个空操作。通常你应该在这里做一些恢复工作。except:passelse:passfinally:passtry-&gt;异常-&gt;except-&gt;finallytry-&gt;无异常-&gt;else-&gt;finally10.函数使用def来创建新函数defadd(x,y):print(f&quot;xis{x}andyis{y}&quot;)returnx+y#使用return语句来返回值调用函数并传入参数add(5,6)#=&gt;输出&quot;xis5andyis6&quot;并且返回11调用函数的另一种方式是传入关键字参数add(y=6,x=5)#关键字参数可以以任意顺序传入你可以定义一个函数，并让它接受可变数量的定位参数。defvarargs(*args):returnargsvarargs(1,2,3)#=&gt;(1,2,3)你也可以定义一个函数，并让它接受可变数量的关键字参数。defkeyword_args(**kwargs):returnkwargs我们试着调用它，看看会发生什么：keyword_args(big=&quot;foot&quot;,loch=&quot;ness&quot;)#=&gt;{&quot;big&quot;:&quot;foot&quot;,&quot;loch&quot;:&quot;ness&quot;}你还可以同时使用这两类参数，只要你愿意：defall_the_args(*args,**kwargs):print(args)print(kwargs)all_the_args(1,2,a=3,b=4)&quot;&quot;&quot;输出:(1,2){&quot;a&quot;:3,&quot;b&quot;:4}&quot;&quot;&quot;在调用函数时，定位参数和关键字参数还可以反过来用。使用*来展开元组，使用**来展开关键字参数。args=(1,2,3,4)kwargs={&quot;a&quot;:3,&quot;b&quot;:4}all_the_args(*args)#相当于all_the_args(1,2,3,4)all_the_args(**kwargs)#相当于all_the_args(a=3,b=4)all_the_args(*args,**kwargs)#相当于all_the_args(1,2,3,4,a=3,b=4)11.类我们可以从对象中继承，来得到一个类。classHuman(object):#下面是一个类属性。它将被这个类的所有实例共享。species=&quot;H.sapiens&quot;#初始化def__init__(self,name):#把参数赋值为实例的name属性self.name=name#下面是一个实例方法。所有方法都以self作为第一个参数。defsay(self,msg):returnf&quot;{self.name}:{msg}&quot;#类方法会被所有实例共享。#类方法在调用时，会将类本身作为第一个参数传入。@classmethoddefget_species(cls):returncls.species#静态方法在调用时，不会传入类或实例的引用。@staticmethoddefgrunt():return&quot;*grunt*&quot;实例化一个类i=Human(name=&quot;Ian&quot;)print(i.say(&quot;hi&quot;))#打印出&quot;Ian:hi&quot;j=Human(&quot;Joel&quot;)print(j.say(&quot;hello&quot;))#打印出&quot;Joel:hello&quot;调用我们的类方法print(i.get_species())#=&gt;&quot;H.sapiens&quot;修改共享属性print(Human.species)#=&gt;&quot;H.species&quot;Human.species=&quot;H.chinaman&quot;print(i.get_species())#=&gt;&quot;H.species&quot;print(j.get_species())#=&gt;&quot;H.species&quot;调用静态方法print(Human.grunt())#=&gt;&quot;*grunt*&quot;12.模块你可以导入模块importmathprint(math.sqrt(16))#=&gt;4也可以从一个模块中获取指定的函数frommathimportceil,floorprint(ceil(3.7))#=&gt;4.0print(floor(3.7))#=&gt;3.0你可以从一个模块中导入所有函数，警告：不建议使用这种方式frommathimport*你可以缩短模块的名称importmathasmprint(math.sqrt(16)==m.sqrt(16))#=&gt;TruePython模块就是普通的.py文件。你可以编写你自己的模块，然后导入它们模块的名称与文件名相同你可以查出一个模块里有哪些函数和属性importmathprint(dir(math))随机数模块#实现了各种分布的伪随机数生成器importrandomvalues=[1,2,3,4,5,6]#从非空序列中返回一个随机元素random.choice(values)#无重复抽取指定个数的元素random.sample(values,2)#生成[1-6]随机整数random.randint(1,6)#返回[0-1)范围内的随机浮点数random.random()13.闭包闭包是一个包含有环境变量的函数对象deff(x):deff1(y):return2*x+yreturnf1my_f=f(15)print(my_f(5))14.装饰器装饰器可以对一个函数、方法或者类进行加工defdecorator_demo(old_function):defnew_function(a,b):print(&quot;input&quot;,a,b)returnold_function(a,b)returnnew_function@decorator_demodefsquare_sum(a,b):returna**2+b**2print(square_sum(3,4))14.1.带参装饰器defpre_str(pre=&quot;&quot;):defdecorator(old_function):defnew_function(a,b):print(pre+&quot;input&quot;,a,b)returnold_function(a,b)returnnew_functionreturndecorator@pre_str(&quot;^_^&quot;)defsquare_sum(a,b):returna**2+b**2print(square_sum(3,4))14.2.装饰类defdecorator_class(Some_Class):classNew_Class(object):def__init__(self,age):self.total_display=0self.wrapped=Some_Class(age)defdisplay(self):self.total_display+=1print(&quot;显式总次数&quot;,self.total_display)self.wrapped.display()returnNew_Class@decorator_classclassBird(object):def__init__(self,age):self.age=agedefdisplay(self):print(&quot;我的年龄&quot;,self.age)eagle=Bird(5)eagle.display()eagle.display()15.匿名函数(lambdax:x&gt;2)(3)#=&gt;True16.内建的高阶函数map(add_10,[1,2,3])filter(lambdax:x&gt;5,[3,4,5,6,7])reduce(lambdax,y:x+y,[1,2,3]])17.列表解析L=[x**2forxinrange(10)ifx%2==0]18.字典解析d={k:vfork,vinenumerate(&quot;Vamei&quot;)ifvnotin&quot;Vi&quot;}"}, "md/py练习.html": {"url": "md/py练习.html", "title": "Python 练习", "keywords": "", "body": "Python练习1.填空题Python是一种面向对象的高级语言。Python可以在多种平台运行，这体现了Python语言的可移植性特性。Python3.x默认使用的编码是UTF-8。在Python中，int表示的是数据类型是整型。布尔类型的值包括True和False。如果想知道变量的类型，可以使用type()函数来实现。字符串是一种表示文本数据的类型。Python3提供了input函数从控制台读入一行文本。Python序列类型包括字符串、列表和元组三种，字典是Python中唯一的映射类型。Python中的可变数据类型有字典和列表。判断列表中是否存在该元素时可以使用notin和in运算符。如果要从小到大地排列列表的元素，可以使用sort方法实现。元组使用小括号存放元素，列表使用的是方括号。在循环体中使用break语句可以跳出循环体。elif语句是else语句和if语句的组合。在循环体中可以使用continue语句跳过本次循环后面的代码，重新开始下一次循环。如果希望循环是无限的，我们可以通过设置条件表达式永远为True来实现无限循环。函数可以有多个参数，参数之间使用逗号分隔。使用return语句可以返回函数值并退出函数。通过return结束函数，从而选择性地返回一个值给调用方。函数能处理比声明时更多的参数，它们是不定长参数。在函数里面调用另外一个函数，这就是函数递归（嵌套）调用。在函数内部定义的变量称作局部变量。全局变量定义在函数外，可以在整个程序范围内访问。如果想在函数中修改全局变量，需要在变量的前面加上global关键字。要调用random模块的randint函数，书写形式为random.randint。每个Python文件都可以作为一个模块，模块的名字就是文件的名字。每个模块都有一个__name__属性，使程序块只能在模块自身运行时执行。为了更好地组织模块，通常会把多个模块放在一个包中。当程序中需要引入外部模块时，需要从外面下载并安装。如果要搜索模块的路径，可以使用sys模块的path变量。Python源代码被解释器转换后的格式为字节码（.pyc）。Python中的pass表示的是空语句。在Python中，可以使用class关键字来声明一个类。面向对象需要把问题划分为多个独立的对象，然后调用其方法解决问题。对象的方法中必须有一个self参数，位于参数列表的开头。类的方法中必须有一个cls参数，位于参数列表的开头。Python提供了名称为__init__的初始化方法，实现让类的对象完成初始化。如果想修改属性的默认值，可以在初始化方法中使用参数设置。如果属性名的前面加了两个__（下划线），就表明它是私有属性。在现有类基础上构建新类，新的类称作子类，现有的类称作父类。父类的私有属性和方法是不能被子类继承的，更不能被子类访问。Python语言既支持单继承，也支持多继承。子类想按照自己的方式实现方法，需要重写从父类继承的方法。子类通过super()可以成功地访问父类的成员。位于类内部、方法外部的方法是类方法。类方法是类拥有的方法，使用修饰器@classmethod来标识。内部函数引用了外部函数作用域的变量，那么内部函数叫作闭包。装饰器本质上是一个函数。装饰器函数需要接收一个参数，这个参数表示被修饰的函数。在函数定义的前面添加装饰器名和@符号，实现对函数的包装。支持参数的装饰器函数需要再多一层内嵌函数。map函数会根据提供的函数对指定的序列做映射。map的两个序列的元素个数不一致，那么元素少的序列会以None补齐。filter函数会对指定序列执行过滤操作。filter传入的函数的返回值是布尔值。reduce传入的是带有两个参数的函数。2.判断题Python是开源的，它可以被移植到许多平台上。（对）Python的优点之一是具有伪代码的本质。（对）Python可以开发Web程序，也可以管理操作系统。（对）Python3.x版本的代码完全兼容Python2.x。（错）PyCharm是开发Python的集成开发环境。（对）Python使用符号#表示单行注释。（对）标识符可以以数字开头。（错）type()方法可以查看变量的数据类型。（对）Python中的代码块使用缩进来表示。（对）Python中的多行语句可以使用反斜杠来连接。（对）Python中的标识符不区分大小写。（错）Python中的标识符不能使用关键字。（对）Python中的成员运算符in用于判断指定序列中是否包含某个值。（对）比较运算符用于比较两个数，其返回的结果只能是True或False。（对）无论使用单引号或双引号包含字符，使用print输出的结果都一样。（对）Python中字符串的下标是从1开始的。（错）切片选取的区间范围是从起始位开始，到结束位结束，不包含结束位置。（对）无论input接收任何的数据，都会以字符串的方式进行保存。（对）列表的索引是从0开始的。（对）通过insert方法可以在指定位置插入元素。（对）使用下标能修改列表的元素。（对）列表的嵌套指的是一个列表的元素是另一个列表。（对）通过下标索引可以修改和访问元组的元素。（错）字典中的值只能是字符串类型。（错）在字典中，可以使用count方法计算键值对的个数。（错）elif可以单独使用。（错）每个if条件后面都要使用冒号。（对）循环语句可以嵌套使用。（对）函数的名称可以随意命名。（错）不带return的函数代表返回None。（对）默认情况下，参数值和参数名称是跟函数声明定义的顺序匹配的。（对）函数定义完成后，系统会自动执行其内部的功能。（错）函数体以冒号起始，并且是缩进格式的。（对）带有默认值的参数一定位于参数列表的末尾。（对）局部变量的作用域是整个程序，任何时候使用都有效。（错）每个Python文件都是一个模块。（对）当__name__属性的值为__main__时，代表该模块自身在运行。（对）包目录下必须有一个__init__.py文件。（对）Python程序被解释器转换后的文件格式后缀名为.pyc。（对）使用help()函数可以查看帮助。（对）pass语句的出现是为了保持程序结构的完整性。（对）面向对象是基于面向过程的。（错）通过类可以创建对象，有且只有一个对象实例。（错）方法和函数的格式是完全一样的。（错）创建类的对象时，系统会自动调用初始化方法进行初始化。（对）创建完对象后，其属性的初始值是固定的，外界无法进行修改。（错）使用del语句删除对象，可以手动释放它所占用的资源。（对）Python中没有任何关键字区分公有属性和私有属性。（对）继承会在原有类的基础上产生新的类，这个新类就是父类。（错）带有两个下划线的方法一定是私有方法。（对）子类能继承父类的一切属性和方法。（错）子类通过重写继承的方法，覆盖掉跟父类同名的方法。（对）如果类属性和实例属性重名，对象优先访问类属性的值。（错）使用类获取的值一定是类属性的值。（对）静态方法中一定不能访问实例变量的值。（对）使用下标可以访问字符串中的每个字符。（对）如果index方法没有在字符串中找到子串，则会返回−1。（错）闭包是内部函数对外部作用域的变量进行引用。（错）当外部函数执行结束，其内部闭包引用的变量一定会立即释放。（错）装饰器是一个变量。（错）装饰器函数至少要接收一个参数。（对）装饰器既能装饰带参数的函数，也能自己带参数。（对）如果map函数传入的两个序列个数不同，那么个数多的序列会把多余的元素删除。（错）map函数只能传递一个序列。（错）map传入函数的参数个数必须跟序列的个数一样。（对）filter传入的函数可以为None。（对）filter函数只能对序列执行过滤操作。（错）filter函数的返回值为字符串，它的序列类型一定是字符串。（对）3.选择题以下（A）不是Python的特性。A.收费使用B.跨平台C.可拓展D.可嵌入Python程序的文件扩展名是（C）。A..pythonB..pC..pyD..pythPython语言源程序的执行方式是（B）。A.编译执行B.解释执行C.直接执行D.边编译边执行以下关于Python语言中注释说法错误的是（A）。A.注释语句可以被执行B.注释语句以#符号开头C.多行注释可以用&#x27;&#x27;&#x27;将其包围起来D.单行注释可以和非注释语句的同一行，并出现在非注释语句之后下列选项中，（D）的布尔值不是False。A.[]B.0C.()D.1假设a=9，b=2，那么下列运算中，错误的是（D）。A.a+b的值是11B.a//b的值是4C.a%b的值是1D.a**b的值是18Python3支持多行语句，下面对于多行语句描述有误的是（D）。A.一行可以书写多个语句B.一个语句可以分多行书写C.一行多语句可以用分号隔开D.一个语句多行书写时直接按回车即可标识符可以用于变量、函数、对象等的命名，对于标识符描述有误的的是（C）。A.标识符不可以以数字开头B.标识符可以由数字、字母和下划线组成C.标识符不区分大小写D.保留字符做标识符时会出错下列标识符中，合法的是（D）。A.helloWorldB.2ndObjC.hello#worldD._helloworld下列符号中，表示Python中单行注释的是（A）。A.#B.//C.&lt;!----&gt;D.&quot;&quot;下列选项中，符合Python命名规范的标识符是（C）。A.user-PasswdB.ifC._nameD.setup.exe实际应用中变量的使用是避免不了的，而在Python中，如下变量使用正确的是（A）。A.numvalue=10B.numSum+=10，不需要事先声明变量C.Val和val是同一个变量D.yield=&#x27;str&#x27;下列选项中，Python不支持的数据类型有（B）。A.intB.charC.floatD.dict下列表达式中，返回True的是（B）。A.a=2B.3&gt;2&gt;1C.TrueandFalseD.2!=2下列语句中，（B）在Python中是非法的。A.x=y=z=1B.x=(y=z+1)C.2&lt;3==2&lt;4下列选项中，幂运算的符号为（D）。A.*B.++C.%D.**如下对于字符串拼接有误的是（C）。A.&quot;Lifeisshort,&quot;&quot;youneedPython.&quot;B.&quot;Lifeisshort,&quot;+&quot;youneedPython.&quot;C.&quot;Lifeisshort,&quot;2*&quot;youneedPython.&quot;D.&quot;&quot;Lifeisshort,&quot;+2*&quot;youneedPython.&quot;当需要在字符串中使用特殊字符时，Python使用（A）作为转义字符。A.\\B./C.#D.%下列数据中，不属于字符串的是（D）。A.&#x27;ab&#x27;B.&#x27;&#x27;&#x27;perfect&#x27;&#x27;&#x27;C.&quot;52wo&quot;D.abc下列数据类型中，不支持切片操作的是（C）。A.字符串B.列表C.字典D.元组Python中的序列类型数据结构元素的切片操作非常灵活且功能强大，对于列表Letter=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]，下述操作会正常输出结果的是（A）。A.Letter[-4:-1:-1]B.Letter(:3:2)C.Letter[1:3:0]D.Letter[&#x27;a&#x27;:&#x27;d&#x27;:2]关于列表的说法，描述错误的是（D）。A.list是一个有序集合，没有固定大小B.list可以存放任意类型的元素C.使用list时，其下标可以是负数D.list是不可变的数据类型以下程序的输出结果是（B）。list=[1,2,3,4,5,&#x27;a&#x27;,&#x27;b&#x27;]print(list[1],list[5])A.1　5B.2　aC.1　97D.2　97列表类型数据结构拥有很多方法和函数，可以实现对列表对象的常用处理，对于列表对象names=[&#x27;Lucy&#x27;,&#x27;Lily&#x27;,&#x27;Tom&#x27;,&#x27;Mike&#x27;,&#x27;David&#x27;]，下述列表方法和函数使用正确的是（D）。A.names.append(&#x27;Helen&#x27;,&#x27;Mary&#x27;)B.names.remove(1)C.names.index(&#x27;Jack&#x27;)D.names[2]=&#x27;Jack&#x27;执行下面的操作后，list2的值为（C）。list1=[4,5,6]list2=list1list1[2]=3A.[4,5,6]B.[4,3,6]C.[4,5,3]D.A，B，C都不正确Python中的数据结构可分为可变类型与不可变类型，下面属于不可变类型的是（C）。A.字典B.列表C.字典中的键D.集合（set类型）阅读下面的程序：list=[1,2,1,3]nums=set(list)foriinnums:print(i,end=&quot;&quot;)程序执行的结果为（D）。A.1213B.213C.321D.123下列选项中，正确定义了一个字典的是（D）。A.a=[&#x27;a&#x27;,1,&#x27;b&#x27;,2,&#x27;c&#x27;,3]B.b=(&#x27;a&#x27;,1,&#x27;b&#x27;,2,&#x27;c&#x27;,3)C.c={&#x27;a&#x27;,1,&#x27;b&#x27;,2,&#x27;c&#x27;,3}D.d={&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3}下列选项中，不能使用下标运算的是（C）。A.列表（list）B.元组（tuple）C.集合（set）D.字符串（str）下列程序执行后输出的结果为（A）。x=&#x27;abc&#x27;y=xy=100print(x)A.”abc”B.100C.97,98,99D.以上三项均是错误的删除列表中最后一个元素的函数是（B）。A.delB.popC.removeD.cut下列函数中，用于返回元组中元素最小值的是（C）。A.lenB.maxC.minD.tuple在Python中实现多个条件判断需要用到（B）语句与if语句的组合。A.elseB.elifC.passD.以上均不正确循环中可以用（C）语句来跳出深度循环。A.passB.continueC.breakD.以上均可以可以使用（B）语句跳出当前循环的剩余语句，继续进行下一轮循环。A.passB.continueC.breakD.以上均可以在foriinrange(6)语句中，i的取值是（D）。A.[1,2,3,4,5,6]B.[1,2,3,4,5]C.[0,1,2,3,4]D.[0,1,2,3,4,5]下列选项中，会输出1，2，3三个数字的是（C）。A.foriinrange(3):print(i)B.foriinrange(2):print(i+1)C.aList=[0,1,2]foriinaList:print(i+1)D.i=1whilei&lt;3:print(i)i=i+1阅读下面的代码：sum=0foriinrange(100):ifi%10:continuesum=sum+iprint(sum)上述程序的执行结果是（C）。A.5050B.4950C.450D.45已知x=10，y=20，z=30；以下语句执行后x，y，z的值是（C）。ifx&lt;y:z=xx=yy=zA.10，20，30B.10，20，20C.20，10，10D.20，10，30列表解析式[i+6foriinrange(0,3)]返回的结果是（C）。A.[1,2,3]B.[0,1,2]C.[6,7,8]D.[7,8,9]有一个列表L=[4,6,8,10,12,5,7,9]，列表解析式[xforxinLifx%2==0]返回的结果是（C）。A.[4,8,12,7]B.[6,10,5,9]C.[4,6,8,10,12]D.[5,7,9]如下代码中可以正确运行出结果的是（C）。A.[nforiinrange(0,3)]B.[n=IforIinrange(0,3)]C.[jforjinrange(0,3)]D.以上均可以可变参数*args传入函数时的存储方式为（A）。A.元组B.列表C.字典D.数据框可变参数**kwargs传入函数时的存储方式为（B）。A.元组B.字典C.列表D.数据框有一个函数关系表如下所示：xyx&lt;0x-1x=0xx&gt;0x+1下面程序段中，能正确表示上面关系的是（C）。A.y=x+1ifx&gt;=0:ifx==0:y=xelse:y=x-1B.y=x-1ifx!=0:ifx&gt;0:y=x+1else:y=xC.ifx&lt;=0:ifx&lt;0:y=x-1else:y=xelse:y=x+1D.y=xifx&lt;=0:ifx&lt;0:y=x-1else:y=x+1阅读下面的程序：deffunc():print(x)x=100func()执行上述语句后，输出的结果为（C）。A.0B.100C.程序出现异常D.程序编译失败下面关于函数的说法，错误的是（C）。A.函数可以减少代码的重复，使得程序更加模块化B.在不同的函数中可以使用相同名字的变量C.调用函数时，位置传参的顺序和函数定义时的顺序可以不同D.函数体中如果没有return语句，也会返回一个None值下列有关函数的说法中，正确的是（C）。A.函数的定义必须在程序的开头B.函数定义后，其中的程序就可以自动执行C.函数定义后需要调用才会执行D.函数体与关键字def必须左对齐下列函数调用使用的参数传递方式是（A）。result=sum(1,2)A.位置B.关键字C.变量类型D.变量名称使用（C）关键字创建自定义函数。A.functionB.funcC.defD.procedure下列关键字中，用来引入模块的是（C）。A.includeB.fromC.importD.continue关于引入模块的方式，错误的是（D）。A.importmathB.fromfibimportfibonacciC.frommathimport*D.from*importfib关于__name__的说法，下列描述错误的是（A）。A.它是Python提供的一个方法B.每个模块内部都有一个__name__属性C.当它的值为__main__时，表示模块自身在运行D.当它的值不为__main__时，表示模块被引用在面向对象程序设计的发展中引入了对象、对象类、方法、实例等概念和术语，采用动态联编和单继承机制，以至于被视为面向对象的基础的语言是（A）。A.SimulaB.SmautalkC.BASICD.Java关于面向过程和面向对象，下列说法错误的是（B）。A.面向过程和面向对象都是解决问题的一种思路B.面向过程是基于面向对象的C.面向过程强调的是解决问题的步骤D.面向对象强调的是解决问题的对象关于类和对象的关系，下列描述正确的是（D）。A.类是面向对象的核心B.类是现实中事物的个体C.对象是根据类创建的，并且一个类只能对应一个对象D.对象描述的是现实的个体，它是类的实例以下关于self的说法不正确的是（A）。A.self可有可无，它的参数位置也不确定B.self是可以修改的C.self代表当前对象的地址D.self不是关键词，也不用赋值构造方法的作用是（D）。A.一般成员方法B.类的初始化C.对象的初始化D.对象的建立初始化方法是类的一个特殊方法，Python中它的名称为（C）。A.与类同名B._constructC.__init__D.initPython类中包含一个特殊的变量（A），它表示当前对象自身，可以访问类的成员。A.selfB.meC.thisD.与类同名下列选项中，符合类的命名规范的是（A）。A.HolidayResortB.HolidayResortC.holidayResortD.holidayresortPython中用于释放类占用资源的方法是（B）。A.__init__B.__del__C._delD.deletePython中定义私有属性的方法是（D）。A.使用private关键字B.使用public关键字C.使用__XX__定义属性名D.使用__XX定义属性名下列选项中，不属于面向对象程序设计的三个特征的是（A）。A.抽象B.封装C.继承D.多态以下C类继承A类和B类的格式中，正确的是（C）。A.classCA,B:B.classC(A:B):C.classC(A,B):D.classCAandB:下列关于类属性和实例属性的说法中，描述正确的是（B）。A.类属性既可以显式定义，又能在方法中定义B.公有类属性可以通过类和类的实例访问C.通过类可以获取实例属性的值D.类的实例只能获取实例属性的值下列选项中，用于标识为静态方法的是（C）。A.@classmethodB.@instancemethodC.@staticmethodD.@privatemethod下列选项中，用于标识为类方法的是（A）。A.@classmethodB.@instancemethodC.@staticmethodD.@privatemethod下列方法中，不可以使用类名访问的是（A）。A.实例方法B.类方法C.静态方法D.以上3项都不符合生成器都是Iterator对象，但list、dict、str虽然都是Iterable，却不是Iterator。若要把Iterable变成Iterator，在Python中应该使用（D）。A.capitalize函数B.Iterable函数C.Iterator函数D.iter函数下列方法中，能够返回某个子串在字符串中出现次数的是（C）。A.lengthB.indexC.countD.find下列方法中，能够让所有单词的首字母变成大写的方法是（B）。A.capitalizeB.titleC.upperD.ljust字符串的strip方法的作用是（A）。A.删除字符串头尾指定的字符B.删除字符串末尾的指定字符C.删除字符串头部的指定字符D.通过指定分隔符对字符串切片使用（D）关键字声明匿名函数。A.functionB.funcC.defD.lambda关于装饰器，下列说法错误的是（B）。A.装饰器是一个包裹函数B.装饰器只能有一个参数C.通过在函数定义的前面加上@符号和装饰器名，使得装饰器函数生效D.如果装饰器支持参数，其必须再嵌套一层函数下列函数中，用于使用函数对指定序列进行过滤的是（C）。A.map函数B.select函数C.filter函数D.reduce函数下列选项中，不能作为filter函数参数的是（D）。A.列表B.元组C.字符串D.整数阅读下面一段程序：deffoo():a=1defbar():a=a+1returnareturnbarprint(foo()())上述程序执行的结果为（B）。A.程序出现异常B.2C.1D.没有输出结果4.简答题简述Python中标识符的命名规则。点我看分析第一个字符只能是字母、下划线（_）、Unicode字符（中文）标识符的其他部分可以有字母、下划线、数字、Unicode字符组成标识符严格区分大小写标识符不允许为关键字标识符建议为有意义的命名请简述元组、列表和字典的区别。点我看分析外形：列表是中括号括起来的数据；元组是圆括号括起来的数据；字典是花括号括起来的数据存储结构：列表可以存储多个不同类型的数据，以逗号分隔；元组同样能存储多个不同类型的数据，以逗号分隔；字典能存储多个键值对，以逗号分隔，键是唯一的，值是任何类型的。访问方式：列表可以通过下标索引访问元素，索引从0开始；元组可以通过下标索引访问值，索引从0开始；字典通过键来访问值。是否可变类型：列表是可变类型，列表是不可变类型，字典是可变类型。简述break和continue的区别。点我看分析break语句用于结束整个循环；continue的作用是用来结束本次循环，紧接着执行下一次的循环。请简述局部变量和全局变量的区别。点我看分析局部变量：函数内部定义的变量；作用域是函数的内部。全局变量：函数外部定义的变量；作用域是整个程序。请简要说明函数定义的规则。点我看分析以def关键字开头，后面接函数标识符名称和圆括号；给函数起名字的时候，规则跟变量的名字是一样的；任何传入参数和自变量必须放在圆括号中间；函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明；函数内容以冒号起始，并且缩进；return[表达式]结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回None。解释Python脚本程序的__name__的作用。点我看分析每个Python脚本在运行时都有一个__name__属性。如果脚本作为模块被导入，则其__name__属性的值被自动设置为模块名；如果脚本独立运行，则其__name__属性值被自动设置为__main__属性。利用__name__属性即可控制Python程序的运行方式。请简述模块的概念。点我看分析.py文件都是一个模块，请简述导入模块的方法。点我看分析在Python中用关键字import来引入某个模块：导入模块，使用import模块引入；导入模块中的某个函数，使用from模块名import函数名引入；导入模块的全部内容，使用from模块import*；从模块包中导入模块，使用from模块包import模块。简述Python中pass语句的作用。点我看分析Pass语句Python中的pass是空语句，它的出现是为了保持程序结构的完整性。pass不做任何事情，一般用做占位语句。请简述self在类中的意义。点我看分析不用实例化对象就能够在本类中访问自身的属性或方法。类是由哪三个部分组成的？点我看分析类名，属性，方法请简述构造方法和析构方法的作用。点我看分析分别用于初始化对象的属性和释放类所占用的资源。什么是继承？点我看分析类的继承是指在一个现有类的基础上构建一个新的类，构建出来的新类被称作子类，现有类被称作父类，子类会自动拥有父类的属性和方法。请简述私有属性或私有方法无法访问的原理。点我看分析当在一个类的内部定义了私有方法或者私有属性的时候，Python在运行的过程中，把属性或者方法的名字进行了修改，即在属性或者方法名称的前面加上__类名，导致原有的方法无法访问到。什么是多态？点我看分析在Python中，多态是指在不考虑对象类型的情况下使用对象。多态的体现：对不同对象调用同一方法，自动根据对象所属类不同，而做出不同的响应。请简述实例方法、类方法和静态方法的区别。点我看分析类方法需要使用@classmethod进行标识，该方法可以访问类属性，无法访问实例属性，可以通过类实例和类进行调用。静态方法使用@staticmethod进行标识，该方法无法访问实例属性和类属性，起到类似于函数的作用，使用类或者类实例进行调用。实例方法直接在类中使用def进行定义，可以访问其实例属性和类属性，使用类实例进行调用。如果要修改实例属性的值，就直接使用实例方法；如果要修改类属性的值，就直接使用类方法；如果是辅助功能，比如打印菜单，这时可以考虑使用静态方法，可以在不创建对象的前提下使用。请简述Python中以下划线开头的变量名的特点。点我看分析在Python中，以下划线开头的变量名有着特殊的含义，尤其是在类的定义中。用下划线作为变量前缀和后缀来表示类的特殊成员：_xx：这样的对象叫做保护变量，可用，但不建议用，只有类对象和子类对象能够访问这些变量。__xx__：系统定义的特殊成员名字。__xx：类中的私有成员，只有类对象自己能访问，子类对象也不能访问到这个成员。请简述闭包满足的三个条件。点我看分析存在于嵌套关系的函数中；嵌套的内部函数引用了外部函数的变量；嵌套的外部函数会将内部函数名作为返回值返回。请简述装饰器的应用场景。点我看分析引入日志；函数执行时间统计；执行函数前预备处理；执行函数后清理功能；权限校验；缓存。请简述map、filter、reduce函数的作用。点我看分析map函数会根据提供的函数对指定的序列做映射。filter函数会对指定序列执行过滤操作。reduce函数会对参数序列中的元素进行累积。正则表达式的主要作用是什么？点我看分析正则表达式主要用于快速地搜索、替换或验证具有特殊形式或格式的文本，可以应用于文本编辑、查找，也可以应用于web数据处理与分析等领域。什么是线程？点我看分析线程是CPU使用的基本单元，由主线程来创建，并使用这个进程的资源，因此线程创建成本低而且可以实现并行处理，充分利用CPU。什么是进程？点我看分析进程是应用程序正在执行的实体，当程序执行时，也就创建了一个主线程。进程在创建和执行时需要一定的资源，比如内存、文件、I/O设备等。在Python3中使用进程与使用线程相比有什么优点？点我看分析Python虽然支持多线程应用程序的创建，但是Python解释器使用了内部的全局解释器锁定（GIL），在任意指定的时刻只允许单个线程执行，并限制了Python程序只能在一个处理器上运行。而现代CPU已经以多核为主，但Python的多线程程序无法使用。使用Python的多进程模块可以将工作分派给不受锁定限制的单独子进程。5.编程题已知直角三角形的两个直角边的长度a=3、b=4，求斜边c的长度。点我看分析importmatha=float(input(&quot;请输入直角边1的长度:&quot;))b=float(input(&quot;请输入直角边2的长度:&quot;))c=a*a+b*bc=math.sqrt(c)#开方，得到的是斜边长print(&quot;斜边长为:&quot;,c)编写一个程序，用于实现两个数的交换。点我看分析x=input(&#x27;输入x值:&#x27;)y=input(&#x27;输入y值:&#x27;)x,y=y,xprint(f&#x27;交换后x的值为:{x}\\ty的值为:{y}&#x27;)请根据下述需求，编写一个程序。用户输入一个字符串，将下标为偶数的字符提出来合并成一个新的字符串A，再将下标为奇数的字符提出来合并成一个新的字符串B，再将字符串A和B连接起来并输出。点我看分析arr=[]even_A=&quot;&quot;odd_B=&quot;&quot;message=input(&quot;请输入任意字符串：&quot;)forstringinmessage:arr.append(string)forsin(arr[::2]):even_A=even_A+sforsin(arr[1::2]):odd_B=odd_B+sprint(even_A+odd_B)请编写一个程序，用于统计字符串中每个字符的出现次数（字母忽略大小写，a和A看做是同一个字母），统计出的结果，请按照['a':3,'b':2]的格式输出。点我看分析message=input(&quot;请输入字符串：&quot;).lower()a={}forsinset(message):ifmessage.count(s)&gt;=1:a[s]=message.count(s)print(a)请根据下列需求，编写一个程序。用户输入一个字符串，请将字符串中的所有字符全部向后移动一位，最后一个字符放到字符串的开头，最后将新的字符串输出。点我看分析message=list(input(&quot;请输入字符串：&quot;))new=&quot;&quot;.join([message[-1]]+message[:-1])print(new)假设有个列表存储了奇数个无序数字arr=[2,1,4,3,6,7,5]，请编写程序，输出数值居中的数字4。点我看分析arr=[2,1,4,3,6,7,5]arr.sort()print(arr[len(arr)//2])已知info=[1,2,3,4,5]，请通过两种编程方法，将列表编程为info=[5,4,3,2,1]。点我看分析#第一种info_1=[1,2,3,4,5]info_1.sort(reverse=True)print(info_1)#第二种info_2=[1,2,3,4,5]info_2.reverse()print(info_2)用户输入n，然后输入n个整数到列表中，列表中的n个整数需要使用冒泡进行排序，并将排序后的结果输出。点我看分析n=int(input(&quot;请输入一个整数n：&quot;))arr=[]foriinrange(n):t=int(input(f&quot;请输入第{n}个整数：&quot;))arr.append(t)print(f&quot;原始列表：{arr}&quot;)foriinrange(1,len(arr)):forjinrange(0,len(arr)-i):ifarr[j]&gt;arr[j+1]:arr[j],arr[j+1]=arr[j+1],arr[j]print(f&quot;排序后列表：{arr}&quot;)实现删除列表info=[1,2,3,2,1]重复元素。点我看分析info=[1,2,3,2,1]print(set(info))假设有两个3x3的矩阵\\(a=\\begin{bmatrix}3&-1&2\\\\1&5&7\\\\2&4&5\\end{bmatrix}\\)\\(b=\\begin{bmatrix}7&5&-2\\\\5&1&9\\\\4&2&1\\end{bmatrix}\\)，请编写一个程序，计算这两个矩阵的和并输出。点我看分析a=[[3,-1,2],[1,5,7],[2,4,5]]b=[[7,5,-2],[5,1,9],[4,2,1]]c=[]foriinrange(3):c.append(list(map(lambdax:sum(x),zip(a[i],b[i]))))fora1inc:fora2ina1:print(a2,end=&quot;\\t&quot;)print()请编写一个程序，使用字典存储学生信息，学生信息包括学号和姓名，请根据学生学号从小到大输出学生的信息。点我看分析dic={}foriinrange(3):number=input(&quot;输入学生学号：&quot;)name=input(&quot;输入学生姓名：&quot;)dic.setdefault(number,name)print(f&quot;排序前：{dic}&quot;)new={k:vfork,vinsorted(dic.items(),key=lambdaa:a[0])}print(f&quot;排序后：{new}&quot;)已知一个字典包含若干员工信息（姓名和性别）dic={&quot;小明&quot;:&quot;男&quot;,&quot;小红&quot;:&quot;女&quot;,&quot;小兰&quot;:&quot;女&quot;,&quot;小白&quot;:&quot;男&quot;}，请编写一个函数，删除性别为男的员工信息。点我看分析defdel_male(infos):returndict(filter(lambdax:x[1]!=&quot;男&quot;,infos.items()))dic={&quot;小明&quot;:&quot;男&quot;,&quot;小红&quot;:&quot;女&quot;,&quot;小兰&quot;:&quot;女&quot;,&quot;小白&quot;:&quot;男&quot;}print(f&quot;删除后：{del_male(dic)}&quot;)已知一个列表存储了多个整数arr=[12,3,37,7,91,67,27,45,6]，请编写函数，删除列表中的素数。点我看分析arr=[12,3,37,7,91,67,27,45,6]defdel_prime(info):forelementininfo:#素数大于1ifelement&gt;1:#查看因子foriinrange(2,element):if(element%i)==0:breakelse:info.remove(element)del_prime(arr)print(arr)编写一个程序，使用for循环输出0～10之间的偶数。点我看分析foriinrange(0,11,2):print(i)编写一个程序，判断用户输入的数是正数还是负数。点我看分析a=int(input(&quot;请输入一个数：&quot;))ifa&gt;0:print(f&quot;{a}是一个正数&quot;)elifa&lt;0:print(f&quot;{a}是一个负数&quot;)else:print(f&quot;{a}等于0&quot;)编写一个程序，输出九九乘法表。点我看分析foriinrange(1,10):forjinrange(1,i+1):print(f&quot;{j}*{i}={i*j}&quot;,end=&quot;\\t&quot;)print()定义一个get_max函数，返回三个数（从键盘输入的整数）中的最大值。例如：请输入第1个整数：10请输入第2个整数：15请输入第3个整数：20其中最大值为：20点我看分析defget_max():arr=[]foriinrange(1,4):arr.append(int(input(f&quot;请输入第{i}个数：&quot;)))returnmax(arr)print(get_max())编写函数，求出1/(1×2)−1/(2×3)+1/(3×4)−1/(4×5)+⋯前n项的和，函数以n为参数，它是用户输入的。点我看分析defcompute(n):res=0foriinrange(1,n+1):ifi%2==0:res-=1.0/(i*(i+1))else:res+=1.0/(i*(i+1))returnresnum=int(input(&quot;请输入一个整数：&quot;))print(compute(num))回文数是一个正向和逆向都相同的整数，如123454321、9889。编写函数判断一个整数是否是回文数。点我看分析defpalindrome(n):s=str(n)returnf&quot;{n}是回文&quot;ifs[:]==s[::-1]elsef&quot;{n}不是回文&quot;print(palindrome(12321))编写函数，判断输入的三个数字是否能构成三角形的三条边。点我看分析defis_triangle(a,b,c):ifa+b&gt;canda+c&gt;bandb+c&gt;a:print(&quot;YES&quot;)else:print(&quot;NO&quot;)is_triangle(3,4,5)编写函数，求两个正整数的最小公倍数。点我看分析deflcm(x,y):foriinrange(max(x,y),x*y+1):ifi%x==0andi%y==0:returninum1=int(input(&quot;输入第一个数字:&quot;))num2=int(input(&quot;输入第二个数字:&quot;))print(num1,&quot;和&quot;,num2,&quot;的最小公倍数为&quot;,lcm(num1,num2))设计一个Circle（圆）类，包括圆心位置、半径、颜色等属性。编写初始化方法和其他方法，计算周长和面积。请编写程序验证类的功能。点我看分析frommathimportpiclassCircle(object):def__init__(self,tup,radius,color):self.center=tupself.radius=radiusself.color=colordefperimeter(self):return2*pi*self.radiusdefarea(self):returnpi*self.radius**2circle=Circle((0,0),5,&quot;蓝色&quot;)print(circle.perimeter())print(circle.area())设计一个表示学生的（Student）类，该类的属性有姓名（name）、年龄（age）、成绩（scores）（类型为列表，成绩包含语文、数学和英语三科成绩，每科成绩的类型为整数），另外有3个方法：获取学生姓名的方法：get_name()获取学生年龄的方法：get_age()返回3门科目中最高的成绩：get_score()写好类以后用li=Student(&quot;李四&quot;,20,[69,88,100])测试，并输出结果。点我看分析classStudent(object):&quot;&quot;&quot;学生类&quot;&quot;&quot;def__init__(self,name,age,scores):&quot;&quot;&quot;初始化方法:paramname:姓名:paramage:年龄:paramscores:三科成绩（语文、数学、英语）:typename:str:typeage:int:typescores:list[int,int,int]&quot;&quot;&quot;self.name=nameself.age=ageself.scores=scoresdefget_name(self):&quot;&quot;&quot;获取名字:return:名字:rtype:str&quot;&quot;&quot;returnself.namedefget_age(self):&quot;&quot;&quot;获取年龄:return:年龄:rtype:int&quot;&quot;&quot;returnself.agedefget_score(self):&quot;&quot;&quot;三科最高成绩:return:三科最高成绩:rtype:int&quot;&quot;&quot;returnmax(self.scores)li=Student(&quot;李四&quot;,20,[69,88,100])print(li.get_name())print(li.get_age())print(li.get_score())设计一个表示动物（Animal）的类，该类包括颜色（color）属性和叫（call）方法。再设计一个表示鱼（Fish）的类，包括尾巴（tail）和颜色（color）两个属性，及叫（call）方法。提示：让Fish类继承自Animal类，重写__init__()和call方法。点我看分析classAnimal(object):def__init__(self,color):&quot;&quot;&quot;初始化动物:paramcolor:颜色&quot;&quot;&quot;self.color=colordefcall(self):&quot;&quot;&quot;叫&quot;&quot;&quot;print(&quot;动物叫&quot;)classFish(Animal):def__init__(self,color,tail):&quot;&quot;&quot;初始化鱼:paramcolor:颜色:paramtail:尾巴&quot;&quot;&quot;super().__init__(color)self.tail=taildefcall(self):&quot;&quot;&quot;叫&quot;&quot;&quot;print(&quot;鱼叫&quot;)已知有个列表[1,2,3,4,5]，让列表的每个元素加1，把结果不能被2整除的元素筛选出来。点我看分析arr=[1,2,3,4,5]print(list(filter(lambdax:x%2!=0,map(lambdax:x+1,arr))))6.程序分析题阅读下面的程序，分析代码输出结果。代码：tup=(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)tup[3]=&#x27;d&#x27;print(tup)点我看分析程序运行错误，元组不能使用下标增加元素。代码：dic={&quot;a&quot;:1,&quot;b&quot;:2,&quot;a&quot;:3}print(dic[&#x27;a&#x27;])点我看分析3代码：arr=[10,23,66,26,35,1,76,88,58]arr.reverse()print(arr[3])arr.sort()print(arr[3])点我看分析126代码：num1=input(&quot;请输入一个整数：&quot;)num2=input(&quot;请输入一个整数：&quot;)ifnum1%num2==0:print(&quot;验证码正确&quot;)点我看分析TypeError异常，num1和num2属于字符串类型，不能执行取余操作代码：name=&#x27;SteveJobs&#x27;print(name[6])点我看分析抛出ValueError异常代码：deffunc():x=200deffunc2():print(x)func2()x=100func()print(x)点我看分析200100代码：defmy_fun():passprint(my_fun())点我看分析None"}, "md/sort/index.html": {"url": "md/sort/index.html", "title": "Python 3 排序算法", "keywords": "", "body": "Python3排序算法参考文献排序算法是《数据结构与算法》中最基本的算法之一。1.分类十种常见排序算法可以分为两大类：非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。2.算法复杂度3.相关概念稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面。时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。"}, "md/sort/冒泡排序.html": {"url": "md/sort/冒泡排序.html", "title": "冒泡排序", "keywords": "", "body": "冒泡排序冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢浮到数列的顶端。1.算法描述比较相邻的元素。如果第一个比第二个大，就交换它们两个；对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；针对所有的元素重复以上的步骤，除了最后一个；重复步骤1~3，直到排序完成。2.动图演示3.什么时候最快当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。4.什么时候最慢当输入的数据是反序时（写一个for循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。5.代码实现defbubbleSort(arr):foriinrange(1,len(arr)):forjinrange(0,len(arr)-i):ifarr[j]&gt;arr[j+1]:arr[j],arr[j+1]=arr[j+1],arr[j]returnarr"}, "md/sort/选择排序.html": {"url": "md/sort/选择排序.html", "title": "选择排序", "keywords": "", "body": "选择排序选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。1.算法描述n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：初始状态：无序区为R[1..n]，有序区为空；第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；n-1趟结束，数组有序化了。2.动图演示3.代码实现defselectionSort(arr):foriinrange(len(arr)-1):#记录最小数的索引minIndex=iforjinrange(i+1,len(arr)):ifarr[j]&lt;arr[minIndex]:minIndex=j#i不是最小数时，将i和最小数进行交换ifi!=minIndex:arr[i],arr[minIndex]=arr[minIndex],arr[i]returnarr4.算法分析表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。"}, "md/sort/插入排序.html": {"url": "md/sort/插入排序.html", "title": "插入排序", "keywords": "", "body": "插入排序插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。1.算法描述一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：从第一个元素开始，该元素可以认为已经被排序；取出下一个元素，在已经排序的元素序列中从后向前扫描；如果该元素（已排序）大于新元素，将该元素移到下一位置；重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；将新元素插入到该位置后；重复步骤2~5。2.动图演示3.代码实现definsertionSort(arr):foriinrange(len(arr)):preIndex=i-1current=arr[i]whilepreIndex&gt;=0andarr[preIndex]&gt;current:arr[preIndex+1]=arr[preIndex]preIndex-=1arr[preIndex+1]=currentreturnarr4.算法分析插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。"}, "md/sort/希尔排序.html": {"url": "md/sort/希尔排序.html", "title": "希尔排序", "keywords": "", "body": "希尔排序（ShellSort）1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。1.算法描述先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；按增量序列个数k，对序列进行k趟排序；每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m的子序列，分别对各子表进行直接插入排序。仅增量因子为1时，整个序列作为一个表来处理，表长度即为整个序列的长度。2.动图演示3.代码实现defshellSort(arr):importmathgap=1while(gap&lt;len(arr)/3):gap=gap*3+1whilegap&gt;0:foriinrange(gap,len(arr)):temp=arr[i]j=i-gapwhilej&gt;=0andarr[j]&gt;temp:arr[j+gap]=arr[j]j-=gaparr[j+gap]=tempgap=math.floor(gap/3)returnarr}4.算法分析希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者RobertSedgewick提出的。"}, "md/sort/归并排序.html": {"url": "md/sort/归并排序.html", "title": "归并排序", "keywords": "", "body": "归并排序（MergeSort）归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（DivideandConquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。1.算法描述把长度为n的输入序列分成两个长度为n/2的子序列；对这两个子序列分别采用归并排序；将两个排序好的子序列合并成一个最终的排序序列。2.动图演示3.代码实现defmergeSort(arr):importmathif(len(arr)&lt;2):returnarrmiddle=math.floor(len(arr)/2)left,right=arr[0:middle],arr[middle:]returnmerge(mergeSort(left),mergeSort(right))defmerge(left,right):result=[]whileleftandright:ifleft[0]&lt;=right[0]:result.append(left.pop(0));else:result.append(right.pop(0));whileleft:result.append(left.pop(0));whileright:result.append(right.pop(0));returnresult4.算法分析归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。"}, "md/sort/快速排序.html": {"url": "md/sort/快速排序.html", "title": "快速排序", "keywords": "", "body": "快速排序（QuickSort）快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。1.算法描述快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：从数列中挑出一个元素，称为基准（pivot）；重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。2.动图演示3.代码实现defquickSort(arr,left=None,right=None):left=0ifnotisinstance(left,(int,float))elseleftright=len(arr)-1ifnotisinstance(right,(int,float))elserightifleft&lt;right:partitionIndex=partition(arr,left,right)quickSort(arr,left,partitionIndex-1)quickSort(arr,partitionIndex+1,right)returnarrdefpartition(arr,left,right):pivot=leftindex=pivot+1i=indexwhilei&lt;=right:ifarr[i]&lt;arr[pivot]:swap(arr,i,index)index+=1i+=1swap(arr,pivot,index-1)returnindex-1defswap(arr,i,j):arr[i],arr[j]=arr[j],arr[i]"}, "md/sort/堆排序.html": {"url": "md/sort/堆排序.html", "title": "堆排序", "keywords": "", "body": "堆排序堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。1.算法描述将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。2.动图演示3.代码实现defbuildMaxHeap(arr):importmathforiinrange(math.floor(len(arr)/2),-1,-1):heapify(arr,i)defheapify(arr,i):left=2*i+1right=2*i+2largest=iifleft&lt;arrLenandarr[left]&gt;arr[largest]:largest=leftifright&lt;arrLenandarr[right]&gt;arr[largest]:largest=rightiflargest!=i:swap(arr,i,largest)heapify(arr,largest)defswap(arr,i,j):arr[i],arr[j]=arr[j],arr[i]defheapSort(arr):globalarrLenarrLen=len(arr)buildMaxHeap(arr)foriinrange(len(arr)-1,0,-1):swap(arr,0,i)arrLen-=1heapify(arr,0)returnarr"}, "md/sort/计数排序.html": {"url": "md/sort/计数排序.html", "title": "计数排序", "keywords": "", "body": "计数排序计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。1.算法描述找出待排序的数组中最大和最小的元素；统计数组中每个值为i的元素出现的次数，存入数组C的第i项；对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。2.动图演示3.代码实现defcountingSort(arr,maxValue):bucketLen=maxValue+1bucket=[0]*bucketLensortedIndex=0arrLen=len(arr)foriinrange(arrLen):ifnotbucket[arr[i]]:bucket[arr[i]]=0bucket[arr[i]]+=1forjinrange(bucketLen):whilebucket[j]&gt;0:arr[sortedIndex]=jsortedIndex+=1bucket[j]-=1returnarr4.算法分析计数排序是一个稳定的排序算法。当输入的元素是n个0到k之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。"}, "md/sort/桶排序.html": {"url": "md/sort/桶排序.html", "title": "桶排序", "keywords": "", "body": "桶排序桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序(Bucketsort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。1.算法描述设置一个定量的数组当作空桶；遍历输入数据，并且把数据一个一个放到对应的桶里去；对每个不是空的桶进行排序；从不是空的桶里把排好序的数据拼接起来。2.图片演示参考资料3.代码实现defsetData(pattern,num):datalist=[]print(&#x27;请输入数据&#x27;.format(num))forvarinrange(0,num):tmp=input(&#x27;&gt;&gt;&gt;&#x27;)while((pattern-1)&lt;int(tmp))or(0&gt;int(tmp)):print(&#x27;错误:数字超过了范围&#x27;)tmp=input(&#x27;&gt;&gt;&gt;&#x27;)datalist.append(tmp)returndatalistdefbucketSort(pattern,data,num):results=list()buckets=[[]forxinrange(pattern)]print(&#x27;INPUT:{}&#x27;.format(data))forxinrange(0,num):buckets[int(data[x])].append(data[x])i=0forxinrange(0,pattern):y=0maxlen=len(buckets[x])ifmaxlenisnot0:whiley&lt;maxlen:results.append(buckets[x][y])y+=1returnresultsdefmain():pattern=10#0-9data=[]result=[]print(&#x27;进行几项数据?&#x27;)dataNum=input(&#x27;&gt;&gt;&gt;&#x27;)data=setData(pattern,int(dataNum))result=bucketSort(pattern,data,int(dataNum))print(&#x27;RESULT:{}&#x27;.format(result))if__name__==&#x27;__main__&#x27;:main()4.算法分析桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。"}, "md/sort/基数排序.html": {"url": "md/sort/基数排序.html", "title": "基数排序", "keywords": "", "body": "基数排序（RadixSort）基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。1.算法描述取得数组中的最大数，并取得位数；arr为原始数组，从最低位开始取每个位组成radix数组；对radix进行计数排序（利用计数排序适用于小范围数的特点）；2.动图演示3.代码实现defradix_sort(mylist):base=10n=0max_digit=len(str(max(mylist)))whilemax_digit&gt;n:bucket=[[]for_inrange(10)]foriinmylist:bucket[i//(base**n)%10].append(i)index=0foriinrange(len(bucket)):stage_two=bucket[i]fornumsinstage_two:mylist[index]=numsindex+=1n+=14.算法分析基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n)，当然d要远远小于n，因此基本上还是线性级别的。基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。"}, "md/exercise/index.html": {"url": "md/exercise/index.html", "title": "Python 3 练习", "keywords": "", "body": "Python练习题目（Python3）"}, "md/exercise/001.html": {"url": "md/exercise/001.html", "title": "Python 3 练习 001", "keywords": "", "body": "Python练习1.题目有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？2.分析可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去掉不满足条件的排列。3.实例点我看答案n=0foriinrange(1,5):forjinrange(1,5):forkinrange(1,5):if(i!=k)and(i!=j)and(j!=k):print(i,j,k)n+=1print(f&quot;共计{n}个&quot;)"}, "md/exercise/002.html": {"url": "md/exercise/002.html", "title": "Python 3 练习 002", "keywords": "", "body": "Python练习1.题目企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成；从键盘输入当月利润I，求应发放奖金总数？2.分析3.实例点我看答案i=int(input(&#x27;净利润:&#x27;))arr=[1000000,600000,400000,200000,100000,0]rat=[0.01,0.015,0.03,0.05,0.075,0.1]r=0foridxinrange(6):ifi&gt;arr[idx]:r+=(i-arr[idx])*rat[idx]print((i-arr[idx])*rat[idx])i=arr[idx]print(r)"}, "md/exercise/003.html": {"url": "md/exercise/003.html", "title": "Python 3 练习 003", "keywords": "", "body": "Python练习1.题目一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？2.分析假设该数为x。1、则：\\(x+100=n^2\\),\\(x+100+168=m^2\\)2、计算等式：\\(m^2-n^2=(m+n)(m-n)=168\\)3、设置：\\(m+n=i\\)，\\(m-n=j\\)，\\(i*j=168\\)，i和j至少一个是偶数4、可得：\\(m=(i+j)/2\\)，\\(n=(i-j)/2\\)，i和j要么都是偶数，要么都是奇数。5、从3和4推导可知道，i与j均是大于等于2的偶数。6、由于\\(i*j=168\\)，\\(j>=2\\)，则\\(17、接下来将i的所有数字循环计算即可。3.实例点我看答案foriinrange(1,85):if168%i==0:j=168/iifi&gt;jand(i+j)%2==0and(i-j)%2==0:m=(i+j)/2n=(i-j)/2x=n*n-100print(x)"}, "md/exercise/004.html": {"url": "md/exercise/004.html", "title": "Python 3 练习 004", "keywords": "", "body": "Python练习1.题目输入某年某月某日，判断这一天是这一年的第几天？2.分析以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊情况，闰年且输入月份大于2时需考虑多加一天。3.实例点我看答案year=int(input(&#x27;year:&#x27;))month=int(input(&#x27;month:&#x27;))day=int(input(&#x27;day:&#x27;))day_sum=0months=(0,31,59,90,120,151,181,212,243,273,304,334)if0&lt;month&lt;=12:day_sum=months[month-1]else:print(&#x27;数据错误。&#x27;)day_sum+=dayleap=0if(year%400==0)or((year%4==0)and(year%100!=0)):leap=1if(leap==1)and(month&gt;2):day_sum+=1print(f&#x27;共计有{day_sum}天。&#x27;)"}, "md/exercise/005.html": {"url": "md/exercise/005.html", "title": "Python 3 练习 005", "keywords": "", "body": "Python练习1.题目输入三个整数x,y,z，请把这三个数由小到大输出。2.分析我们想办法把最小的数放到x上，先将x与y进行比较，如果x&gt;y则将x与y的值进行交换，然后再用x与z进行比较，如果x&gt;z则将x与z的值进行交换，这样能使x最小。3.实例点我看答案l=[]foriinrange(3):x=int(input(&#x27;整数：&#x27;))l.append(x)l.sort()print(l)"}, "md/exercise/006.html": {"url": "md/exercise/006.html", "title": "Python 3 练习 006", "keywords": "", "body": "Python练习1.题目斐波那契数列。2.分析斐波那契数列（Fibonaccisequence），又称黄金分割数列，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……。在数学上，费波那契数列是以递归的方法来定义：F0=0(n=0)F1=1(n=1)Fn=F[n-1]+F[n-2](n=&gt;2)3.实例点我看答案deffib(n):a,b=1,1foriinrange(n-1):a,b=b,a+breturna#输出了第10个斐波那契数列print(fib(10))#使用递归deffib(n):ifn==1orn==2:return1returnfib(n-1)+fib(n-2)#输出了第10个斐波那契数列print(fib(10))#输出指定个数的斐波那契数列deffib(n):ifn==1:return[1]ifn==2:return[1,1]fibs=[1,1]foriinrange(2,n):fibs.append(fibs[-1]+fibs[-2])returnfibs#输出前10个斐波那契数列print(fib(10))"}, "md/exercise/007.html": {"url": "md/exercise/007.html", "title": "Python 3 练习 007", "keywords": "", "body": "Python练习1.题目将一个列表的数据复制到另一个列表中。2.分析使用列表[:]。3.实例点我看答案a=[1,2,3]b=a[:]print(b)"}, "md/exercise/008.html": {"url": "md/exercise/008.html", "title": "Python 3 练习 008", "keywords": "", "body": "Python练习1.题目输出9*9乘法口诀表。2.分析分行与列考虑，共9行9列，i控制行，j控制列。3.实例点我看答案foriinrange(1,10):forjinrange(1,i+1):print(f&quot;{i}*{j}={i*j}&quot;,end=&#x27;\\t&#x27;)print()"}, "md/exercise/009.html": {"url": "md/exercise/009.html", "title": "Python 3 练习 009", "keywords": "", "body": "Python练习1.题目暂停一秒输出。2.分析使用time模块的sleep()函数。3.实例点我看答案importtimelist1=[1,2,3,4,5]foriinlist1:print(i)time.sleep(1)#暂停1秒"}, "md/exercise/010.html": {"url": "md/exercise/010.html", "title": "Python 3 练习 010", "keywords": "", "body": "Python练习1.题目暂停一秒输出，并格式化当前时间。2.分析time模块的格式化时间函数3.实例点我看答案importtimeprint(time.strftime(&#x27;%Y-%m-%d%H:%M:%S&#x27;,time.localtime()))#暂停一秒time.sleep(1)print(time.strftime(&#x27;%Y-%m-%d%H:%M:%S&#x27;,time.localtime()))"}, "md/exercise/011.html": {"url": "md/exercise/011.html", "title": "Python 3 练习 011", "keywords": "", "body": "Python练习1.题目有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？2.分析兔子的规律为数列1,1,2,3,5,8,13,21....3.实例点我看答案f1=1f2=1foriinrange(1,22):print(f&#x27;{f1:&gt;12}\\t{f2:&gt;12}&#x27;,end=&#x27;\\t&#x27;)if(i%3)==0:print()f1=f1+f2f2=f1+f2"}, "md/exercise/012.html": {"url": "md/exercise/012.html", "title": "Python 3 练习 012", "keywords": "", "body": "Python练习1.题目判断101-200之间有多少个素数，并输出所有素数。2.分析判断素数的方法：用一个数分别去除2到sqrt（这个数），如果能被整除，则表明此数不是素数，反之是素数。3.实例点我看答案frommathimportsqrth=0leap=1forminrange(101,201):k=int(sqrt(m+1))foriinrange(2,k+1):ifm%i==0:leap=0breakifleap==1:print(m)h+=1leap=1print(f&#x27;共计有{h}个&#x27;)"}, "md/exercise/013.html": {"url": "md/exercise/013.html", "title": "Python 3 练习 013", "keywords": "", "body": "Python练习1.题目打印出所有的&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个&quot;水仙花数&quot;，因为153=1的三次方＋5的三次方＋3的三次方。2.分析利用for循环控制100-999个数，每个数分解出个位，十位，百位。3.实例点我看答案forninrange(100,1000):i=n//100j=int(n/10%10)k=int(n%10)ifn==i**3+j**3+k**3:print(n)"}, "md/exercise/014.html": {"url": "md/exercise/014.html", "title": "Python 3 练习 014", "keywords": "", "body": "Python练习1.题目将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。2.分析对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成：如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。如果n&lt;&gt;k，但n能被k整除，则应打印出k的值，并用n除以k的商，作为新的正整数你n,重复执行第一步。如果n不能被k整除，则用k+1作为k的值，重复执行第一步。3.实例点我看答案defreduceNum(n):print(f&#x27;{n}=&#x27;,end=&#x27;&#x27;)ifnotisinstance(n,int)orn&lt;=0:print(&#x27;请输入一个正确的数字!&#x27;)exit(0)elifn==1:print(f&#x27;{n}&#x27;)else:whilennotin[1]:#循环保证递归forindexinrange(2,n+1):ifn%index==0:n//=index#n等于n/indexifn==1:print(index)else:#index一定是素数print(f&#x27;{index}*&#x27;,end=&#x27;&#x27;)breakreduceNum(90)reduceNum(100)"}, "md/exercise/015.html": {"url": "md/exercise/015.html", "title": "Python 3 练习 015", "keywords": "", "body": "Python练习1.题目利用条件运算符的嵌套来完成此题：学习成绩&gt;=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。2.分析(a&gt;b)?a:b这是条件运算符的基本例子。3.实例点我看答案score=int(input(&#x27;输入分数:&#x27;))ifscore&gt;=90:grade=&#x27;A&#x27;elifscore&gt;=60:grade=&#x27;B&#x27;else:grade=&#x27;C&#x27;print(f&#x27;{score}属于{grade}&#x27;)"}, "md/exercise/016.html": {"url": "md/exercise/016.html", "title": "Python 3 练习 016", "keywords": "", "body": "Python练习1.题目输出指定格式的日期。2.分析使用datetime模块。3.实例点我看答案importdatetime#输出今日日期，格式为dd/mm/yyyy。更多选项可以查看strftime()方法print(datetime.date.today().strftime(&#x27;%d/%m/%Y&#x27;))#创建日期对象birthDate=datetime.date(1941,1,5)print(birthDate.strftime(&#x27;%d/%m/%Y&#x27;))#日期算术运算birthNextDay=birthDate+datetime.timedelta(days=1)print(birthNextDay.strftime(&#x27;%d/%m/%Y&#x27;))#日期替换firstBirthday=birthDate.replace(year=birthDate.year+1)print(firstBirthday.strftime(&#x27;%d/%m/%Y&#x27;))"}, "md/exercise/017.html": {"url": "md/exercise/017.html", "title": "Python 3 练习 017", "keywords": "", "body": "Python练习1.题目输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。2.分析利用while或for语句，条件为输入的字符不为\\n。3.实例点我看答案s=input(&#x27;请输入一个字符串:&#x27;)letters=0space=0digit=0others=0forcins:ifc.isalpha():letters+=1elifc.isspace():space+=1elifc.isdigit():digit+=1else:others+=1print(f&#x27;char={letters},space={space},digit={digit},others={others}&#x27;)"}, "md/exercise/018.html": {"url": "md/exercise/018.html", "title": "Python 3 练习 018", "keywords": "", "body": "Python练习1.题目求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222（此时共有5个数相加），几个数相加由键盘控制。2.分析关键是计算出每一项的值。3.实例点我看答案fromfunctoolsimportreduceTn=0Sn=[]n=int(input(&#x27;n=&#x27;))a=int(input(&#x27;a=&#x27;))forcountinrange(n):Tn=Tn+aa=a*10Sn.append(Tn)print(Tn)Sn=reduce(lambdax,y:x+y,Sn)print(&quot;计算和为：&quot;,Sn)"}, "md/exercise/019.html": {"url": "md/exercise/019.html", "title": "Python 3 练习 019", "keywords": "", "body": "Python练习1.题目一个数如果恰好等于它的因子之和，这个数就称为&quot;完数&quot;。例如6=1＋2＋3,编程找出1000以内的所有完数。2.分析3.实例点我看答案forjinrange(2,1001):k=[]n=-1s=jforiinrange(1,j):ifj%i==0:n+=1s-=ik.append(i)ifs==0:print(j)foriinrange(n):print(str(k[i]),end=&quot;\\t&quot;)print(k[n])"}, "md/exercise/020.html": {"url": "md/exercise/020.html", "title": "Python 3 练习 020", "keywords": "", "body": "Python练习1.题目一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？2.分析无3.实例点我看答案tour=[]height=[]hei=100.0#起始高度tim=10#次数foriinrange(1,tim+1):#从第二次开始，落地时的距离应该是反弹高度乘以2（弹到最高点再落下）ifi==1:tour.append(hei)else:tour.append(2*hei)hei/=2height.append(hei)print(f&#x27;总高度：tour={tour}&#x27;)print(f&#x27;第10次反弹高度：height={height[-1]}&#x27;)"}, "md/exercise/021.html": {"url": "md/exercise/021.html", "title": "Python 3 练习 021", "keywords": "", "body": "Python练习1.题目猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。2.分析采取逆向思维的方法，从后往前推断。3.实例点我看答案x2=1x1=0fordayinrange(9,0,-1):x1=(x2+1)*2x2=x1print(x1)"}, "md/exercise/022.html": {"url": "md/exercise/022.html", "title": "Python 3 练习 022", "keywords": "", "body": "Python练习1.题目两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。2.分析3.实例点我看答案importitertoolsfirst=(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)second=(&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;)check_list=[(&#x27;a&#x27;,&#x27;x&#x27;),(&#x27;c&#x27;,&#x27;x&#x27;),(&#x27;c&#x27;,&#x27;z&#x27;)]foriinitertools.permutations(first,3):f=lambdaa,b:len([Trueforjinzip(a,b)ifjnotincheck_list])iff(i,second)==3:print(list(zip(i,second)))"}, "md/exercise/023.html": {"url": "md/exercise/023.html", "title": "Python 3 练习 023", "keywords": "", "body": "Python练习1.题目打印出如下图案（菱形）:*************************2.分析先把图形分成两部分来看待，前四行一个规律，后三行一个规律，利用双重for循环，第一层控制行，第二层控制列。3.实例点我看答案fromsysimportstdoutforiinrange(4):forjinrange(2-i+1):stdout.write(&#x27;&#x27;)forkinrange(2*i+1):stdout.write(&#x27;*&#x27;)print()foriinrange(3):forjinrange(i+1):stdout.write(&#x27;&#x27;)forkinrange(4-2*i+1):stdout.write(&#x27;*&#x27;)print()"}, "md/exercise/024.html": {"url": "md/exercise/024.html", "title": "Python 3 练习 024", "keywords": "", "body": "Python练习1.题目有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。2.分析请抓住分子与分母的变化规律。3.实例点我看答案a=2b=1s=0forninrange(1,21):s+=a/ba,b=a+b,aprint(s)"}, "md/exercise/025.html": {"url": "md/exercise/025.html", "title": "Python 3 练习 025", "keywords": "", "body": "Python练习1.题目求1+2!+3!+...+20!的和。2.分析此程序只是把累加变成了累乘。3.实例点我看答案n=0s=0t=1forninrange(1,21):t*=ns+=tprint(f&#x27;1!+2!+3!+...+20!={s}&#x27;)"}, "md/exercise/026.html": {"url": "md/exercise/026.html", "title": "Python 3 练习 026", "keywords": "", "body": "Python练习1.题目利用递归方法求5!。2.分析递归公式：fn=fn_1*4!3.实例点我看答案deffact(j):ifj==0:sum=1else:sum=j*fact(j-1)returnsumprint(fact(5))"}, "md/exercise/027.html": {"url": "md/exercise/027.html", "title": "Python 3 练习 027", "keywords": "", "body": "Python练习1.题目利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。2.分析无3.实例点我看答案defoutput(s,l):ifl==0:returnprint(s[l-1])output(s,l-1)s=input(&#x27;Inputastring:&#x27;)l=len(s)output(s,l)"}, "md/exercise/028.html": {"url": "md/exercise/028.html", "title": "Python 3 练习 028", "keywords": "", "body": "Python练习1.题目有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？2.分析利用递归的方法，递归分为回推和递推两个阶段。要想知道第五个人岁数，需知道第四人的岁数，依次类推，推到第一人（10岁），再往回推。3.实例点我看答案defage(n):ifn==1:c=10else:c=age(n-1)+2returncprint(age(5))"}, "md/exercise/029.html": {"url": "md/exercise/029.html", "title": "Python 3 练习 029", "keywords": "", "body": "Python练习1.题目给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。2.分析学会分解出每一位数。3.实例点我看答案x=int(input(&quot;请输入一个数:&quot;))a=x//10000b=x%10000//1000c=x%1000//100d=x%100//10e=x%10ifa!=0:print(&quot;5位数：&quot;,e,d,c,b,a)elifb!=0:print(&quot;4位数：&quot;,e,d,c,b,end=&#x27;&#x27;)elifc!=0:print(&quot;3位数：&quot;,e,d,c)elifd!=0:print(&quot;2位数：&quot;,e,d)else:print(&quot;1位数：&quot;,e)"}, "md/exercise/030.html": {"url": "md/exercise/030.html", "title": "Python 3 练习 030", "keywords": "", "body": "Python练习1.题目一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。2.分析3.实例点我看答案a=int(input(&quot;请输入一个数字:&quot;))x=str(a)flag=Trueforiinrange(len(x)//2):ifx[i]!=x[-i-1]:flag=Falsebreakifflag:print(f&quot;{a}是一个回文数!&quot;)else:print(f&quot;{a}不是一个回文数!&quot;)"}, "md/exercise/031.html": {"url": "md/exercise/031.html", "title": "Python 3 练习 031", "keywords": "", "body": "Python练习1.题目请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。2.分析如果第一个字母一样，则判断用if语句判断第二个字母。3.实例点我看答案letter=input(&quot;pleaseinput:&quot;)ifletter==&#x27;S&#x27;:letter=input(&quot;pleaseinput:&quot;)ifletter==&#x27;a&#x27;:print(&#x27;Saturday&#x27;)elifletter==&#x27;u&#x27;:print(&#x27;Sunday&#x27;)else:print(&#x27;dataerror&#x27;)elifletter==&#x27;F&#x27;:print(&#x27;Friday&#x27;)elifletter==&#x27;M&#x27;:print(&#x27;Monday&#x27;)elifletter==&#x27;T&#x27;:print(&#x27;pleaseinputsecondletter&#x27;)letter=input(&quot;pleaseinput:&quot;)ifletter==&#x27;u&#x27;:print(&#x27;Tuesday&#x27;)elifletter==&#x27;h&#x27;:print(&#x27;Thursday&#x27;)else:print(&#x27;dataerror&#x27;)elifletter==&#x27;W&#x27;:print(&#x27;Wednesday&#x27;)else:print(&#x27;dataerror&#x27;)"}, "md/exercise/032.html": {"url": "md/exercise/032.html", "title": "Python 3 练习 032", "keywords": "", "body": "Python练习1.题目按相反的顺序输出列表的值。2.分析3.实例点我看答案a=[&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;]foriina[::-1]:print(i)"}, "md/exercise/033.html": {"url": "md/exercise/033.html", "title": "Python 3 练习 033", "keywords": "", "body": "Python练习1.题目按逗号分隔列表。2.分析3.实例点我看答案L=[1,2,3,4,5]s1=&#x27;,&#x27;.join(str(n)forninL)print(s1)"}, "md/exercise/034.html": {"url": "md/exercise/034.html", "title": "Python 3 练习 034", "keywords": "", "body": "Python练习1.题目练习函数调用。2.分析3.实例点我看答案defhello_world():print(&#x27;helloworld&#x27;)defthree_hellos():foriinrange(3):hello_world()if__name__==&#x27;__main__&#x27;:three_hellos()"}, "md/exercise/035.html": {"url": "md/exercise/035.html", "title": "Python 3 练习 035", "keywords": "", "body": "Python练习1.题目文本颜色设置。2.分析3.实例点我看答案classbcolors:HEADER=&#x27;\\033[95m&#x27;OKBLUE=&#x27;\\033[94m&#x27;OKGREEN=&#x27;\\033[92m&#x27;WARNING=&#x27;\\033[93m&#x27;FAIL=&#x27;\\033[91m&#x27;ENDC=&#x27;\\033[0m&#x27;BOLD=&#x27;\\033[1m&#x27;UNDERLINE=&#x27;\\033[4m&#x27;print(bcolors.WARNING+&quot;警告的颜色字体?&quot;+bcolors.ENDC)"}, "md/exercise/036.html": {"url": "md/exercise/036.html", "title": "Python 3 练习 036", "keywords": "", "body": "Python练习1.题目求100之内的素数。2.分析3.实例点我看答案#输出指定范围内的素数#用户输入数据lower=int(input(&quot;输入区间最小值:&quot;))upper=int(input(&quot;输入区间最大值:&quot;))fornuminrange(lower,upper+1):#素数大于1ifnum&gt;1:foriinrange(2,num):if(num%i)==0:breakelse:print(num)"}, "md/exercise/037.html": {"url": "md/exercise/037.html", "title": "Python 3 练习 037", "keywords": "", "body": "Python练习1.题目对10个数进行排序。2.分析可以利用选择法，即从后9个比较过程中，选择一个最小的与第一个元素交换，下次类推，即用第二个元素与后8个进行比较，并进行交换。3.实例点我看答案N=10#inputdataprint(&#x27;请输入10个数字:&#x27;)l=[]foriinrange(N):l.append(int(input(&#x27;输入一个数字:&#x27;)))print()foriinrange(N):print(l[i])print()#排列10个数字foriinrange(N-1):min=iforjinrange(i+1,N):ifl[min]&gt;l[j]:min=jl[i],l[min]=l[min],l[i]print(&#x27;排列之后：&#x27;)foriinrange(N):print(l[i])"}, "md/exercise/038.html": {"url": "md/exercise/038.html", "title": "Python 3 练习 038", "keywords": "", "body": "Python练习1.题目求一个3*3矩阵主对角线元素之和。2.分析利用双重for循环控制输入二维数组，再将a[i](i)累加后输出。3.实例点我看答案a=[]sum=0.0foriinrange(3):a.append([])forjinrange(3):a[i].append(float(input(&quot;inputnum:&quot;)))foriinrange(3):sum+=a[i][i]print(sum)"}, "md/exercise/039.html": {"url": "md/exercise/039.html", "title": "Python 3 练习 039", "keywords": "", "body": "Python练习1.题目有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。2.分析首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。3.实例点我看答案a=[1,4,6,9,13,16,19,28,40,100,0]print(&#x27;原始列表:&#x27;)foriinrange(len(a)):print(a[i],end=&#x27;&#x27;)number=int(input(&quot;\\n插入一个数字:\\n&quot;))end=a[9]ifnumber&gt;end:a[10]=numberelse:foriinrange(10):ifa[i]&gt;number:temp1=a[i]a[i]=numberforjinrange(i+1,11):temp2=a[j]a[j]=temp1temp1=temp2breakprint(&#x27;排序后列表:&#x27;)foriinrange(11):print(a[i],end=&#x27;&#x27;)"}, "md/exercise/040.html": {"url": "md/exercise/040.html", "title": "Python 3 练习 040", "keywords": "", "body": "Python练习1.题目将一个数组逆序输出。2.分析用第一个与最后一个交换。3.实例点我看答案a=[9,6,5,4,1]N=len(a)print(a)foriinrange(len(a)//2):a[i],a[N-i-1]=a[N-i-1],a[i]print(a)"}, "md/exercise/041.html": {"url": "md/exercise/041.html", "title": "Python 3 练习 041", "keywords": "", "body": "Python练习1.题目模仿静态变量的用法。2.分析3.实例点我看答案defvarfunc():var=0print(f&#x27;var={var}&#x27;)var+=1foriinrange(3):varfunc()#类的属性#作为类的一个属性吧classStatic(object):StaticVar=5defvarfunc(self):self.StaticVar+=1print(self.StaticVar)print(Static.StaticVar)a=Static()foriinrange(3):a.varfunc()"}, "md/exercise/042.html": {"url": "md/exercise/042.html", "title": "Python 3 练习 042", "keywords": "", "body": "Python练习1.题目学习使用auto定义变量的用法。2.分析没有auto关键字，使用变量作用域来举例吧。3.实例点我看答案num=2defautofunc():num=1print(f&#x27;internalblocknum={num}&#x27;)num+=1foriinrange(3):print(f&#x27;Thenum={num}&#x27;)num+=1autofunc()"}, "md/exercise/043.html": {"url": "md/exercise/043.html", "title": "Python 3 练习 043", "keywords": "", "body": "Python练习1.题目模仿静态变量(static)另一案例。2.分析演示一个python作用域使用方法3.实例点我看答案classNum:nNum=1definc(self):self.nNum+=1print(f&#x27;nNum={self.nNum}&#x27;)if__name__==&#x27;__main__&#x27;:nNum=2inst=Num()foriinrange(3):nNum+=1print(f&#x27;Thenum={nNum}&#x27;)inst.inc()"}, "md/exercise/044.html": {"url": "md/exercise/044.html", "title": "Python 3 练习 044", "keywords": "", "body": "Python练习1.题目两个3行3列的矩阵，实现其对应位置的数据相加，并返回一个新矩阵：X=[[12,7,3],[4,5,6],[7,8,9]]Y=[[5,8,1],[6,7,3],[4,5,9]]2.分析创建一个新的3行3列的矩阵，使用for迭代并取出X和Y矩阵中对应位置的值，相加后放到新矩阵的对应位置中。3.实例点我看答案X=[[12,7,3],[4,5,6],[7,8,9]]Y=[[5,8,1],[6,7,3],[4,5,9]]result=[[0,0,0],[0,0,0],[0,0,0]]#迭代输出行foriinrange(len(X)):#迭代输出列forjinrange(len(X[0])):result[i][j]=X[i][j]+Y[i][j]forrinresult:print(r)"}, "md/exercise/045.html": {"url": "md/exercise/045.html", "title": "Python 3 练习 045", "keywords": "", "body": "Python练习1.题目统计1到100之和。2.分析3.实例点我看答案tmp=0foriinrange(1,101):tmp+=iprint(f&#x27;Thesumis{tmp}&#x27;)"}, "md/exercise/046.html": {"url": "md/exercise/046.html", "title": "Python 3 练习 046", "keywords": "", "body": "Python练习1.题目求输入数字的平方，如果平方运算后小于50则退出。2.分析3.实例点我看答案TRUE=1FALSE=0defSQ(x):returnx*xprint(&#x27;如果输入的数字小于50，程序将停止运行。&#x27;)again=1whileagain:num=int(input(&#x27;请输入一个数字：&#x27;))print(f&#x27;运算结果为:{SQ(num)}&#x27;)ifSQ(num)&gt;=50:again=TRUEelse:again=FALSE"}, "md/exercise/047.html": {"url": "md/exercise/047.html", "title": "Python 3 练习 047", "keywords": "", "body": "Python练习1.题目两个变量值互换。2.分析3.实例点我看答案defexchange(a,b):a,b=b,areturna,bif__name__==&#x27;__main__&#x27;:x=10y=20print(f&#x27;x={x},y={y}&#x27;)x,y=exchange(x,y)print(f&#x27;x={x},y={y}&#x27;)"}, "md/exercise/048.html": {"url": "md/exercise/048.html", "title": "Python 3 练习 048", "keywords": "", "body": "Python练习1.题目数字比较。2.分析3.实例点我看答案i=10j=20ifi&gt;j:print(f&#x27;{i}大于{j}&#x27;)elifi==j:print(f&#x27;{i}等于{j}&#x27;)elifi&lt;j:print(f&#x27;{i}小于{j}&#x27;)else:print(&#x27;未知&#x27;)"}, "md/exercise/049.html": {"url": "md/exercise/049.html", "title": "Python 3 练习 049", "keywords": "", "body": "Python练习1.题目使用lambda来创建匿名函数。2.分析3.实例点我看答案defMAXIMUM(x,y):return(x&gt;y)*x+(x&lt;y)*ydefMINIMUM(x,y):return(x&gt;y)*y+(x&lt;y)*xa=10b=20print(f&#x27;Thelargaroneis{MAXIMUM(a,b)}&#x27;)print(f&#x27;Theloweroneis{MINIMUM(a,b)}&#x27;)"}, "md/exercise/050.html": {"url": "md/exercise/050.html", "title": "Python 3 练习 050", "keywords": "", "body": "Python练习1.题目输出一个随机数。2.分析使用random模块。3.实例点我看答案importrandom#生成10到20之间的随机数print(random.randint(10,20))"}, "md/exercise/051.html": {"url": "md/exercise/051.html", "title": "Python 3 练习 051", "keywords": "", "body": "Python练习1.题目学习使用按位与&amp;。2.分析0&amp;0=0;0&amp;1=0;1&amp;0=0;1&amp;1=1。3.实例点我看答案a=0o77b=a&amp;3print(f&#x27;a&amp;b={b}&#x27;)b&amp;=7print(f&#x27;a&amp;b={b}&#x27;)"}, "md/exercise/052.html": {"url": "md/exercise/052.html", "title": "Python 3 练习 052", "keywords": "", "body": "Python练习1.题目学习使用按位或|2.分析0|0=0;0|1=1;1|0=1;1|1=13.实例点我看答案a=0o77b=a|3print(f&#x27;a|bis{b}&#x27;)b|=7print(f&#x27;a|bis{b}&#x27;)"}, "md/exercise/053.html": {"url": "md/exercise/053.html", "title": "Python 3 练习 053", "keywords": "", "body": "Python练习1.题目学习使用按位异或^。2.分析0^0=0;0^1=1;1^0=1;1^1=03.实例点我看答案a=0o77b=a^3print(f&#x27;Thea^3={b}&#x27;)b^=7print(f&#x27;Thea^b={b}&#x27;)"}, "md/exercise/054.html": {"url": "md/exercise/054.html", "title": "Python 3 练习 054", "keywords": "", "body": "Python练习1.题目取一个整数a从右端开始的4〜7位。2.分析(1)先使a右移4位。(2)设置一个低4位全为1,其余全为0的数。可用~(~0&lt;&lt;4)(3)将上面二者进行&amp;运算。3.实例点我看答案a=int(input(&#x27;inputanumber:&#x27;))b=a&gt;&gt;4c=~(~0&lt;&lt;4)d=b&amp;cprint(f&#x27;{a:o}\\t{b:o}&#x27;)"}, "md/exercise/055.html": {"url": "md/exercise/055.html", "title": "Python 3 练习 055", "keywords": "", "body": "Python练习1.题目学习使用按位取反~。2.分析~0=1;~1=0;(1)先使a右移4位。(2)设置一个低4位全为1,其余全为0的数。可用~(~0&lt;&lt;4)(3)将上面二者进行&amp;运算。3.实例点我看答案a=234b=~aprint(f&#x27;Thea\\&#x27;s1complementis{b}&#x27;)a=~aprint(f&#x27;Thea\\&#x27;s2complementis{a}&#x27;)"}, "md/exercise/056.html": {"url": "md/exercise/056.html", "title": "Python 3 练习 056", "keywords": "", "body": "Python练习1.题目出去爬山，爬山的过程中每隔10米记录当前点的海拔高度（以一个浮点数表示）,这些值序列保存在一个由浮点数组成的列表h中。回到家中，研究一下经过了几个山峰，请计算一下，输出结果。例如：h=[0.9,1.2,1.22,1.1,1.6,0.99],将这些高度顺序连线，会发现有两个山峰，故输出一个2（序列两端不算山峰）2.分析考虑海拔相同和去头尾3.实例点我看答案count=0tlag=Falseh=[0.9,1.2,1.22,1.1,1.6,0.99]foriinrange(0,len(h)-1):iftlag==Falseandh[i]&lt;h[i+1]:tlag=Truecontinueiftlag==Trueandh[i]&gt;h[i+1]:count+=1tlag=Falsecontinueprint(count)"}, "md/exercise/057.html": {"url": "md/exercise/057.html", "title": "Python 3 练习 057", "keywords": "", "body": "Python练习1.题目给你三个整数a,b,c,判断能否以它们为三个边长构成三角形。若能，输出YES，否则输出NO。2.分析三角形两边和大于第三边3.实例点我看答案a,b,c=3,4,5ifa+b&gt;canda+c&gt;bandb+c&gt;a:print(&#x27;YES&#x27;)else:print(&#x27;NO&#x27;)"}, "md/exercise/058.html": {"url": "md/exercise/058.html", "title": "Python 3 练习 058", "keywords": "", "body": "Python练习1.题目给你一个整数列表L,判断L中是否存在相同的数字，若存在，输出YES，否则输出NO。2.分析利用集合set元素唯一的特性3.实例点我看答案L=[1,2,3,1,4,5,6]iflen(L)!=len(set(L)):print(&#x27;YES&#x27;)else:print(&#x27;NO&#x27;)"}, "md/exercise/059.html": {"url": "md/exercise/059.html", "title": "Python 3 练习 059", "keywords": "", "body": "Python练习1.题目给你个小写英文字符串a和一个非负数b(0&lt;=b&lt;26),将a中的每个小写字符替换成字母表中比它大b的字母。这里将字母表的z和a相连，如果超过了z就回到了a。例如a=&quot;cagy&quot;b=3则输出：fdjb2.分析3.实例点我看答案a=&quot;cagy&quot;b=3print(&#x27;&#x27;.join([chr(ord(i)+biford(i)+b&lt;=122elseord(i)+b-26)foriina]))"}, "md/exercise/060.html": {"url": "md/exercise/060.html", "title": "Python 3 练习 060", "keywords": "", "body": "Python练习1.题目计算字符串长度。2.分析3.实例点我看答案sStr1=&#x27;strlen&#x27;print(len(sStr1))"}, "md/exercise/061.html": {"url": "md/exercise/061.html", "title": "Python 3 练习 061", "keywords": "", "body": "Python练习1.题目打印出杨辉三角形（要求打印出10行）。2.分析3.实例点我看答案a=[]foriinrange(10):a.append([])forjinrange(10):a[i].append(0)foriinrange(10):a[i][0]=1a[i][i]=1foriinrange(2,10):forjinrange(1,i):a[i][j]=a[i-1][j-1]+a[i-1][j]foriinrange(10):forjinrange(i+1):print(a[i][j],end=&quot;\\t&quot;)print()"}, "md/exercise/062.html": {"url": "md/exercise/062.html", "title": "Python 3 练习 062", "keywords": "", "body": "Python练习1.题目查找字符串。2.分析3.实例点我看答案sStr1=&#x27;abcdefg&#x27;sStr2=&#x27;cde&#x27;print(sStr1.find(sStr2))"}, "md/exercise/063.html": {"url": "md/exercise/063.html", "title": "Python 3 练习 063", "keywords": "", "body": "Python练习1.题目给你一个整数列表L,输出L的中位数。例如：L=[0,1,2,3,4]则输出：22.分析中位数，又称中点数，中值。中位数是按顺序排列的一组数据中居于中间位置的数，即在这组数据中，有一半的数据比他大，有一半的数据比他小，这里用\\(m_{0.5}\\)来表示中位数。注意：中位数和众数不同，众数指最多的数，众数有时不止一个，而中位数只能有一个。有一组数据：\\(X_1,...,X_N\\)将它按从小到大的顺序排序为：\\(X_{(1)},...,X_{(N)}\\)则当N为奇数时，\\(m_{0.5}=\\frac{X_{(N+1)}}{2}\\)当N为偶数时，\\(m_{0.5}=\\frac{X_{(\\frac{N}{2})}+X_{(\\frac{N}{2}+1)}}{2}\\)一个数集中最多有一半的数值小于中位数，也最多有一半的数值大于中位数。如果大于和小于中位数的数值个数均少于一半，那麽数集中必有若干值等同于中位数。3.实例点我看答案L=[0,1,2,3,4]L.sort()iflen(L)%2==0:print((float((L[int(len(L)/2)])+float(L[(int(len(L)/2-1))])))/2)else:print(L[int(len(L)/2)])"}, "md/exercise/064.html": {"url": "md/exercise/064.html", "title": "Python 3 练习 064", "keywords": "", "body": "Python练习1.题目给你一个字符串a，输出a中奇数位置字符构成的字符串（位置编号从1开始）。例如：a=&#x27;xyzwd&#x27;则输出：xzd2.分析范围引用（切片）3.实例点我看答案a=&#x27;xyzwd&#x27;print(a[::2])"}, "md/exercise/065.html": {"url": "md/exercise/065.html", "title": "Python 3 练习 065", "keywords": "", "body": "Python练习1.题目使用Python语言将字符串：&quot;k:1|k1:2|k2:3|k3:4&quot;，处理成python字典：{k:1,k1:2,...}2.分析字典由键值对组成，无法直接由列表强制转换3.实例点我看答案defstring_to_dict(string):d={}forkvinstring.split(&quot;|&quot;):k,v=kv.split(&quot;:&quot;)v=int(v)d[k]=vreturndstring=&quot;k:1|k1:2|k2:3|k3:4&quot;print(string_to_dict(string))"}, "md/exercise/066.html": {"url": "md/exercise/066.html", "title": "Python 3 练习 066", "keywords": "", "body": "Python练习1.题目输入3个数a,b,c，按大小顺序输出2.分析3.实例点我看答案n1=int(input(&#x27;n1=:&#x27;))n2=int(input(&#x27;n2=:&#x27;))n3=int(input(&#x27;n3=:&#x27;))defswap(p1,p2):returnp2,p1ifn1&gt;n2:n1,n2=swap(n1,n2)ifn1&gt;n3:n1,n3=swap(n1,n3)ifn2&gt;n3:n2,n3=swap(n2,n3)print(n1,n2,n3)"}, "md/exercise/067.html": {"url": "md/exercise/067.html", "title": "Python 3 练习 067", "keywords": "", "body": "Python练习1.题目输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。2.分析3.实例点我看答案definp(numbers):foriinrange(6):numbers.append(int(input(&#x27;输入一个数字:&#x27;)))defarr_max(array):max=0foriinrange(1,len(array)-1):p=iifarray[p]&gt;array[max]:max=pk=maxarray[0],array[k]=array[k],array[0]defarr_min(array):min=0foriinrange(1,len(array)-1):p=iifarray[p]&lt;array[min]:min=pl=minarray[5],array[l]=array[l],array[5]defoutp(numbers):foriinrange(len(numbers)):print(numbers[i])array=[]inp(array)#输入6个数字并放入数组arr_max(array)#获取最大元素并与第一个元素交换arr_min(array)#获取最小元素并与最后一个元素交换print(&#x27;计算结果：&#x27;)outp(array)"}, "md/exercise/068.html": {"url": "md/exercise/068.html", "title": "Python 3 练习 068", "keywords": "", "body": "Python练习1.题目有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数2.分析3.实例点我看答案n=int(input(&#x27;整数n为:&#x27;))m=int(input(&#x27;向后移m个位置为:&#x27;))defmove(array,n,m):array_end=array[n-1]foriinrange(n-1,-1,-1):array[i]=array[i-1]array[0]=array_endm-=1ifm&gt;0:move(array,n,m)number=[]foriinrange(n):number.append(int(input(&#x27;输入一个数字:&#x27;)))print(&#x27;原始列表:&#x27;,number)move(number,n,m)print(&#x27;移动之后:&#x27;,number)"}, "md/exercise/069.html": {"url": "md/exercise/069.html", "title": "Python 3 练习 069", "keywords": "", "body": "Python练习1.题目有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。2.分析3.实例点我看答案nmax=50n=int(input(&#x27;请输入总人数:&#x27;))num=[]foriinrange(n):num.append(i+1)i=0k=0m=0whilem&lt;n-1:ifnum[i]!=0:k+=1ifk==3:num[i]=0k=0m+=1i+=1ifi==n:i=0i=0whilenum[i]==0:i+=1print(num[i])"}, "md/exercise/070.html": {"url": "md/exercise/070.html", "title": "Python 3 练习 070", "keywords": "", "body": "Python练习1.题目写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。2.分析3.实例点我看答案s=input(&#x27;pleaseinputastring:&#x27;)print(&#x27;thestringhas%dcharacters.&#x27;%len(s))"}, "md/exercise/071.html": {"url": "md/exercise/071.html", "title": "Python 3 练习 071", "keywords": "", "body": "Python练习1.题目编写input()和output()函数输入，输出5个学生的数据记录。2.分析3.实例点我看答案N=3student=[]foriinrange(5):student.append([&#x27;&#x27;,&#x27;&#x27;,[]])definput_stu(stu):foriinrange(N):stu[i][0]=input(&#x27;inputstudentnum:&#x27;)stu[i][1]=input(&#x27;inputstudentname:&#x27;)forjinrange(3):stu[i][2].append(int(input(&#x27;score:&#x27;)))defoutput_stu(stu):foriinrange(N):print(f&#x27;{stu[i][0]}\\t{stu[i][1]}&#x27;)forjinrange(3):print(f&#x27;{stu[i][2][j]}&#x27;,end=&quot;\\t&quot;)print()input_stu(student)print(student)output_stu(student)"}, "md/exercise/072.html": {"url": "md/exercise/072.html", "title": "Python 3 练习 072", "keywords": "", "body": "Python练习1.题目创建一个链表。2.分析3.实例点我看答案ptr=[]foriinrange(5):num=int(input(&#x27;pleaseinputanumber:&#x27;))ptr.append(num)print(ptr)"}, "md/exercise/073.html": {"url": "md/exercise/073.html", "title": "Python 3 练习 073", "keywords": "", "body": "Python练习1.题目反向输出一个链表。2.分析3.实例点我看答案ptr=[]foriinrange(5):num=int(input(&#x27;pleaseinputanumber:&#x27;))ptr.append(num)print(ptr)ptr.reverse()print(ptr)"}, "md/exercise/074.html": {"url": "md/exercise/074.html", "title": "Python 3 练习 074", "keywords": "", "body": "Python练习1.题目列表排序及连接。2.分析排序可使用sort()方法，连接可以使用+号或extend()方法。3.实例点我看答案a=[1,3,2]b=[3,4,5]a.sort()#对列表a进行排序print(a)#连接列表a与bprint(a+b)#连接列表a与ba.extend(b)print(a)"}, "md/exercise/075.html": {"url": "md/exercise/075.html", "title": "Python 3 练习 075", "keywords": "", "body": "Python练习1.题目假如有10个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好。第一个小盆友只有一个人我们假设是有序的，然后第二个小盆友会跟第一个比，如果第一个高就交换位置。接下来第三个小盆友从第二个位置开始比较，如果没第二个高就交换位置，然后没第一个高也交换位置，保持前边三个小盆友身高有序就好。依次类推，等到最后一个小盆友也转移到合适的位置，整个队列就是有序的了。2.分析插入排序3.实例点我看答案importrandomdefinsertion_sort(seq):&quot;&quot;&quot;每次挑选下一个元素插入已经排序的数组中,初始时已排序数组只有一个元素&quot;&quot;&quot;n=len(seq)foriinrange(1,n):value=seq[i]#保存当前位置的值，因为转移的过程中它的位置可能被覆盖#找到这个值的合适位置，使得前边的数组有序[0,i]有序pos=iwhilepos&gt;0andvalue&lt;seq[pos-1]:seq[pos]=seq[pos-1]#如果前边的元素比它大，就让它一直前移pos-=1seq[pos]=value#找到了合适的位置赋值就好print(f&quot;第{i}轮：&quot;,seq)seq=list(range(10))random.shuffle(seq)print(&quot;原始：&quot;,seq)insertion_sort(seq)"}, "md/exercise/076.html": {"url": "md/exercise/076.html", "title": "Python 3 练习 076", "keywords": "", "body": "Python练习1.题目编写一个函数，输入n为偶数时，调用函数求1/2+1/4+...+1/n,当输入n为奇数时，调用函数1/1+1/3+...+1/n2.分析3.实例点我看答案defp_even(n):i=0s=0.0foriinrange(2,n+1,2):s+=1/ireturnsdefp_odd(n):s=0.0foriinrange(1,n+1,2):s+=1/ireturnsif__name__==&#x27;__main__&#x27;:n=int(input(&#x27;inputanumber:&#x27;))ifn%2==0:sum=p_even(n)else:sum=p_odd(n)print(sum)"}, "md/exercise/077.html": {"url": "md/exercise/077.html", "title": "Python 3 练习 077", "keywords": "", "body": "Python练习1.题目循环输出列表2.分析3.实例点我看答案s=[&quot;man&quot;,&quot;woman&quot;,&quot;girl&quot;,&quot;boy&quot;,&quot;sister&quot;]foriinrange(len(s)):print(s[i])"}, "md/exercise/078.html": {"url": "md/exercise/078.html", "title": "Python 3 练习 078", "keywords": "", "body": "Python练习1.题目找到年龄最大的人，并输出。2.分析3.实例点我看答案person={&quot;li&quot;:18,&quot;wang&quot;:50,&quot;zhang&quot;:20,&quot;sun&quot;:22}m=&#x27;li&#x27;forkeyinperson.keys():ifperson[m]&lt;person[key]:m=keyprint(f&#x27;{m}\\t{person[m]}&#x27;)"}, "md/exercise/079.html": {"url": "md/exercise/079.html", "title": "Python 3 练习 079", "keywords": "", "body": "Python练习1.题目字符串排序。2.分析3.实例点我看答案str1=input(&#x27;inputstring:&#x27;)str2=input(&#x27;inputstring:&#x27;)str3=input(&#x27;inputstring:&#x27;)print(str1,str2,str3)ifstr1&gt;str2:str1,str2=str2,str1ifstr1&gt;str3:str1,str3=str3,str1ifstr2&gt;str3:str2,str3=str3,str2print(&#x27;afterbeingsorted.&#x27;)print(str1,str2,str3)"}, "md/exercise/080.html": {"url": "md/exercise/080.html", "title": "Python 3 练习 080", "keywords": "", "body": "Python练习1.题目海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的。问海滩上原来最少有多少个桃子？2.分析3.实例点我看答案i=0j=1x=0whilei&lt;5:x=4*jforiinrange(0,5):ifx%4!=0:breakelse:i+=1x=(x/4)*5+1j+=1print(x)"}, "md/exercise/081.html": {"url": "md/exercise/081.html", "title": "Python 3 练习 081", "keywords": "", "body": "Python练习1.题目809*??=800*??+9*??其中？?代表的两位数，809*??为四位数，8*??的结果为两位数，9*??的结果为3位数。求？?代表的两位数，及809*??后的结果。2.分析3.实例点我看答案a=809foriinrange(10,100):b=i*aif1000&lt;=b&lt;=10000and8*i&lt;100&lt;=9*i:print(b,&#x27;=800*&#x27;,i,&#x27;+9*&#x27;,i)"}, "md/exercise/082.html": {"url": "md/exercise/082.html", "title": "Python 3 练习 082", "keywords": "", "body": "Python练习1.题目八进制转换为十进制2.分析3.实例点我看答案n=0p=input(&#x27;inputaoctalnumber:&#x27;)foriinrange(len(p)):n=n*8+ord(p[i])-ord(&#x27;0&#x27;)print(n)"}, "md/exercise/083.html": {"url": "md/exercise/083.html", "title": "Python 3 练习 083", "keywords": "", "body": "Python练习1.题目求0—7所能组成的奇数个数。2.分析组成1位数是4个。组成2位数是7*4个。组成3位数是7*8*4个。组成4位数是7*8*8*4个。3.实例点我看答案sum=4s=4forjinrange(2,9):print(sum)ifj&lt;=2:s*=7else:s*=8sum+=sprint(f&#x27;sum={sum}&#x27;)"}, "md/exercise/084.html": {"url": "md/exercise/084.html", "title": "Python 3 练习 084", "keywords": "", "body": "Python练习1.题目连接字符串。2.分析3.实例点我看答案delimiter=&#x27;,&#x27;mylist=[&#x27;Brazil&#x27;,&#x27;Russia&#x27;,&#x27;India&#x27;,&#x27;China&#x27;]print(delimiter.join(mylist))"}, "md/exercise/085.html": {"url": "md/exercise/085.html", "title": "Python 3 练习 085", "keywords": "", "body": "Python练习1.题目输入一个奇数，然后判断最少几个9除于该数的结果为整数。2.分析999999/13=769233.实例点我看答案zi=int(input(&#x27;输入一个数字:&#x27;))n1=1c9=1m9=9sum=9whilen1!=0:ifsum%zi==0:n1=0else:m9*=10sum+=m9c9+=1print(f&#x27;{c9}个9可以被{zi}整除:{sum}&#x27;)r=sum/ziprint(f&#x27;{sum}/{zi}={r}&#x27;)"}, "md/exercise/086.html": {"url": "md/exercise/086.html", "title": "Python 3 练习 086", "keywords": "", "body": "Python练习1.题目两个字符串连接程序。2.分析3.实例点我看答案a=&quot;acegikm&quot;b=&quot;bdfhjlnpq&quot;#连接字符串c=a+bprint(c)"}, "md/exercise/087.html": {"url": "md/exercise/087.html", "title": "Python 3 练习 087", "keywords": "", "body": "Python练习1.题目结构体变量传递2.分析3.实例点我看答案classstudent:x=0c=0deff(stu):stu.x=20stu.c=&#x27;c&#x27;a=student()a.x=3a.c=&#x27;a&#x27;f(a)print(a.x,a.c)"}, "md/exercise/088.html": {"url": "md/exercise/088.html", "title": "Python 3 练习 088", "keywords": "", "body": "Python练习1.题目读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。2.分析3.实例点我看答案n=1whilen&lt;=7:a=int(input(&#x27;inputanumber:&#x27;))whilea&lt;1ora&gt;50:a=int(input(&#x27;inputanumber:&#x27;))print(a*&#x27;*&#x27;)n+=1"}, "md/exercise/089.html": {"url": "md/exercise/089.html", "title": "Python 3 练习 089", "keywords": "", "body": "Python练习1.题目某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。2.分析3.实例点我看答案a=int(input(&#x27;输入四个数字:&#x27;))aa=[a%10,a%100//10,a%1000//100,a//1000]foriinrange(4):aa[i]+=5aa[i]%=10foriinrange(2):aa[i],aa[3-i]=aa[3-i],aa[i]foriinrange(3,-1,-1):print(str(aa[i]),end=&quot;&quot;)"}, "md/exercise/090.html": {"url": "md/exercise/090.html", "title": "Python 3 练习 090", "keywords": "", "body": "Python练习1.题目列表使用实例2.分析3.实例点我看答案#list#新建列表testList=[10086,&#x27;中国移动&#x27;,[1,2,4,5]]#访问列表长度print(len(testList))#到列表结尾print(testList[1:])#向列表添加元素testList.append(&#x27;i\\&#x27;mnewhere!&#x27;)print(len(testList))print(testList[-1])#弹出列表的最后一个元素print(testList.pop(1))print(len(testList))print(testList)matrix=[[1,2,3],[4,5,6],[7,8,9]]print(matrix)print(matrix[1])col2=[row[1]forrowinmatrix]#getacolumnfromamatrixprint(col2)col2even=[row[1]forrowinmatrixifrow[1]%2==0]#filterodditemprint(col2even)"}, "md/exercise/091.html": {"url": "md/exercise/091.html", "title": "Python 3 练习 091", "keywords": "", "body": "Python练习1.题目时间函数举例2.分析3.实例点我看答案importtimeprint(time.ctime(time.time()))print(time.asctime(time.localtime(time.time())))print(time.asctime(time.gmtime(time.time())))"}, "md/exercise/092.html": {"url": "md/exercise/092.html", "title": "Python 3 练习 092", "keywords": "", "body": "Python练习1.题目时间函数举例2.分析3.实例点我看答案importtimestart=time.time()foriinrange(3000):print(i)end=time.time()print(end-start)"}, "md/exercise/093.html": {"url": "md/exercise/093.html", "title": "Python 3 练习 093", "keywords": "", "body": "Python练习1.题目时间函数举例2.分析3.实例点我看答案importtimestart=time.process_time()foriinrange(10000):print(i)end=time.process_time()print(f&#x27;differentis{end-start}&#x27;)"}, "md/exercise/094.html": {"url": "md/exercise/094.html", "title": "Python 3 练习 094", "keywords": "", "body": "Python练习1.题目一个猜数游戏，判断一个人反应快慢。2.分析3.实例点我看答案importrandomimporttimeplay_it=input(&quot;doyouwanttoplayit.(&#x27;y&#x27;or&#x27;n&#x27;)&quot;)i=random.randint(0,10**32)whileplay_it==&#x27;y&#x27;:start=time.process_time()a=time.time()guess=int(input(&#x27;pleaseinputnumberyouguess:&#x27;))whileguess!=i:ifguess&gt;i:print(&#x27;pleaseinputalittlesmaller&#x27;)guess=int(input(&#x27;inputyourguess:&#x27;))else:print(&#x27;pleaseinputalittlebigger&#x27;)guess=int(input(&#x27;inputyourguess:&#x27;))end=time.process_time()b=time.time()var=(end-start)/18.2print(var)ifvar&lt;15:print(&#x27;youareveryclever!&#x27;)elifvar&lt;25:print(&#x27;youarenormal!&#x27;)else:print(&#x27;youarestupid!&#x27;)print(&#x27;Congradulations&#x27;)print(f&#x27;Thenumberyouguessis{i}&#x27;)play_it=input(&quot;doyouwanttoplayit.(&#x27;y&#x27;or&#x27;n&#x27;)&quot;)"}, "md/exercise/095.html": {"url": "md/exercise/095.html", "title": "Python 3 练习 095", "keywords": "", "body": "Python练习1.题目字符串日期转换为易读的日期格式2.分析3.实例点我看答案fromdateutilimportparserdt=parser.parse(&quot;Aug28201512:00AM&quot;)print(dt)"}, "md/exercise/096.html": {"url": "md/exercise/096.html", "title": "Python 3 练习 096", "keywords": "", "body": "Python练习1.题目计算字符串中子串出现的次数2.分析3.实例点我看答案str1=input(&#x27;请输入一个字符串:&#x27;)str2=input(&#x27;请输入一个子字符串:&#x27;)ncount=str1.count(str2)print(ncount)"}, "md/exercise/097.html": {"url": "md/exercise/097.html", "title": "Python 3 练习 097", "keywords": "", "body": "Python练习1.题目从键盘输入一些字符，逐个把它们写到磁盘文件上，直到输入一个#为止2.分析3.实例点我看答案filename=input(&#x27;输入文件名:&#x27;)ch=input(&#x27;输入字符串:&#x27;)withopen(filename,&quot;w&quot;,encoding=&quot;utf8&quot;)asf:whilech!=&#x27;#&#x27;:f.write(ch)"}, "md/exercise/098.html": {"url": "md/exercise/098.html", "title": "Python 3 练习 098", "keywords": "", "body": "Python练习1.题目从键盘输入一个字符串，将小写字母全部转换成大写字母，然后输出到一个磁盘文件&quot;test&quot;中保存。2.分析3.实例点我看答案string=input(&#x27;pleaseinputastring:&#x27;)withopen(&#x27;test.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf8&#x27;)asf:f.write(string)"}, "md/exercise/099.html": {"url": "md/exercise/099.html", "title": "Python 3 练习 099", "keywords": "", "body": "Python练习1.题目有两个磁盘文件A和B,各存放一行字母，要求把这两个文件中的信息合并（按字母顺序排列）,输出到一个新文件C中。2.分析3.实例点我看答案fp=open(&#x27;test1.txt&#x27;,encoding=&#x27;utf8&#x27;)a=fp.read()fp.close()fp=open(&#x27;test2.txt&#x27;,encoding=&#x27;utf8&#x27;)b=fp.read()fp.close()fp=open(&#x27;test3.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf8&#x27;)l=list(a+b)l.sort()s=&#x27;&#x27;s=s.join(l)fp.write(s)fp.close()"}, "md/exercise/100.html": {"url": "md/exercise/100.html", "title": "Python 3 练习 100", "keywords": "", "body": "Python练习1.题目列表转换为字典。2.分析3.实例点我看答案i=[&#x27;a&#x27;,&#x27;b&#x27;]l=[1,2]print(dict([l,i]))"}, "md/exercise/101.html": {"url": "md/exercise/101.html", "title": "Python 3 练习 101", "keywords": "", "body": "Python练习1.题目获取100以内的质数。2.分析质数（primenumber）又称素数，有无限个。质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数的数称为质数，如：2、3、5、7、11、13、17、19。3.实例点我看答案num=[]i=2foriinrange(2,100):j=2forjinrange(2,i):ifi%j==0:breakelse:num.append(i)print(num)"}, "md/exercise/102.html": {"url": "md/exercise/102.html", "title": "Python 3 练习 102", "keywords": "", "body": "Python练习1.题目一个活动，活动有开始时间和结束时间，现在要计算活动结束的倒计时，以时分秒的格式显示2.分析计算当前时间与活动时间差，用循环每秒刷新一次3.实例点我看答案importdatetimeimporttime#创建活动结束日期activityDateTime=datetime.datetime(2019,4,13,18,0,0)&quot;&quot;&quot;命令行输出&quot;&quot;&quot;whiledatetime.datetime.now()&lt;activityDateTime:differDateTime=activityDateTime-datetime.datetime.now()print(&quot;倒计时：{}天{}：{}：{}&quot;.format(differDateTime.days,differDateTime.seconds//3600,differDateTime.seconds//60%60,differDateTime.seconds%3600%60))time.sleep(1)print(&quot;活动结束&quot;)"}, "md/exercise/103.html": {"url": "md/exercise/103.html", "title": "Python 3 练习 103", "keywords": "", "body": "Python练习1.题目给定一个只包含正整数且非空的数组返回该数组中重复次数最多的前N个数字（返回结果按重复次数从多到少降序排列，N不存在取值非法的情况）2.实例点我看答案fromcollectionsimportCounterli=[1,2,3,1,1,2,3,1,2,5,6,4,1,2,4,5,6]N=5li_counts=Counter(li)top_three=li_counts.most_common(N)print(top_three)"}, "md/exercise/104.html": {"url": "md/exercise/104.html", "title": "Python 3 练习 104", "keywords": "", "body": "Python练习1.题目编写一个程序，通过用户输入两个数字，并计算这两个数字之和。2.分析根据程序描述，该程序实现过程大概分为如下几步：提示用户输入第1个数字提示用户输入第2个数字对两个数字进行相加输出两个数字相加的和3.实例点我看答案num1=input(&quot;请输入第1个数字：&quot;)num2=input(&quot;请输入第2个数字：&quot;)sum=float(num1)+float(num2)print(f&quot;数字{num1}和{num2}相加之和是{sum}&quot;)"}, "md/exercise/105.html": {"url": "md/exercise/105.html", "title": "Python 3 练习 105", "keywords": "", "body": "Python练习1.题目平方根，又叫二次方根，表示为〔√￣〕，如：数学语言为：√￣16=4。语言描述为：根号下16=4。编写一个程序，通过用户输入一个数字，并计算这个数字的平方根。2.分析关于计算平方根的，可以使用在指数运算符**来计算改数的平方根，也可以使用math函数中的sqrt，不同的是，指数**只适用于正数，而sqrt适用于任何数。接下来，按照下列步骤实现程序：提示用户输入一个数（必须将输入的数转为数字类型）使用math函数的sqrt计算这个数的平方根输出运算结果3.实例点我看答案importmathnum=int(input(&quot;请输入要计算平方根的数字：&quot;))result=math.sqrt(num)print(f&quot;数字{num}的平方根是{result}&quot;)"}, "md/exercise/106.html": {"url": "md/exercise/106.html", "title": "Python 3 练习 106", "keywords": "", "body": "Python练习1.题目如果一个n位正整数等于其各位数字的n次方之和，则称该数为阿姆斯特朗数。例如1^3+5^3+3^3=153。1000以内的阿姆斯特朗数：1,2,3,4,5,6,7,8,9,153,370,371,407。请编写程序，检测用户输入的数字是否为阿姆斯特朗数。2.分析3.实例点我看答案#获取用户输入的数字num=int(input(&quot;请输入一个数字:&quot;))#初始化变量sumsum=0#指数n=len(str(num))#检测temp=numwhiletemp&gt;0:digit=temp%10sum+=digit**ntemp//=10#输出结果ifnum==sum:print(num,&quot;是阿姆斯特朗数&quot;)else:print(num,&quot;不是阿姆斯特朗数&quot;)"}, "md/exercise/107.html": {"url": "md/exercise/107.html", "title": "Python 3 练习 107", "keywords": "", "body": "Python练习1.题目请编写程序，用于生成指定日期的日历。2.分析Calendar模块有很广泛的方法用来处理年历和月历，例如打印某月的月历。3.实例点我看答案#引入日历模块importcalendar#输入指定年月yy=int(input(&quot;输入年份:&quot;))mm=int(input(&quot;输入月份:&quot;))#显示日历print(calendar.month(yy,mm))"}, "md/exercise/108.html": {"url": "md/exercise/108.html", "title": "Python 3 练习 108", "keywords": "", "body": "Python练习1.题目编写程序，用于实现十进制转二进制、八进制、十六进制。2.分析不同进制之间的转换，需要用到下列方法：bin()：将十进制的数转为二进制oct()：将十进制的数转为八进制hex():将十进制的数转为十六进制3.实例点我看答案#获取用户输入十进制数dec=int(input(&quot;输入数字：&quot;))print(&quot;十进制数为：&quot;,dec)print(&quot;转换为二进制为：&quot;,bin(dec))print(&quot;转换为八进制为：&quot;,oct(dec))print(&quot;转换为十六进制为：&quot;,hex(dec))"}, "md/exercise/109.html": {"url": "md/exercise/109.html", "title": "Python 3 练习 109", "keywords": "", "body": "Python练习1.题目请编写一个程序，输出生成10个两位的随机数，并且这两个随机数是素数。2.分析Python的random模块提供了随机数生成方法random.randint(a,b),它返回一个大于等于a，小于等于b的随机整数。3.实例点我看答案importrandomn=0whilen&lt;10:x=random.randint(10,99)#获得一个两位的随机整数#判断x是否为素数a=2whilea&lt;x-1:ifx%a==0:#若余数为0，说明x不是素数，结束当前循环breaka+=1else:print(x)#若正常结束循环时，说明x是素数，输出n+=1#累计素数个数"}, "md/exercise/110.html": {"url": "md/exercise/110.html", "title": "Python 3 练习 110", "keywords": "", "body": "Python练习1.题目通过用户输入三角形三边长度，并计算三角形的面积。2.分析要想计算三角形的面积，需要获取三角形的三边长度，假设三角形的三边分别是a，b，c，那么面积的计算方式如下：三角形半周长s=(a+b+c)/2三角形面积area=(s*(s-a)*(s-b)*(s-c))**0.53.实例点我看答案a=float(input(&#x27;输入三角形第一边长:&#x27;))b=float(input(&#x27;输入三角形第二边长:&#x27;))c=float(input(&#x27;输入三角形第三边长:&#x27;))#计算半周长s=(a+b+c)/2#计算面积area=(s*(s-a)*(s-b)*(s-c))**0.5print(&#x27;三角形面积为%0.2f&#x27;%area)"}, "md/exercise/111.html": {"url": "md/exercise/111.html", "title": "Python 3 练习 111", "keywords": "", "body": "Python练习1.题目昨天的日期2.分析通过导入datetime模块来获取昨天的日期。3.实例点我看答案#引入datetime模块importdatetimedefgetYesterday():today=datetime.date.today()oneday=datetime.timedelta(days=1)yesterday=today-onedayreturnyesterday#输出print(getYesterday())"}, "md/exercise/112.html": {"url": "md/exercise/112.html", "title": "Python 3 练习 112", "keywords": "", "body": "Python练习1.题目判断质数2.分析一个大于1的自然数，除了1和它本身外，不能被其他自然数（质数）整除（2,3,5,7等），换句话说就是该数除了1和它本身以外不再有其他的因数。3.实例点我看答案#用户输入数字num=int(input(&quot;请输入一个数字:&quot;))#质数大于1ifnum&gt;1:#查看因子foriinrange(2,num):if(num%i)==0:print(num,&quot;不是质数&quot;)print(i,&quot;乘于&quot;,num//i,&quot;是&quot;,num)breakelse:print(num,&quot;是质数&quot;)#如果输入的数字小于或等于1，不是质数else:print(num,&quot;不是质数&quot;)"}, "md/exercise/113.html": {"url": "md/exercise/113.html", "title": "Python 3 练习 113", "keywords": "", "body": "Python练习1.题目编写一个程序，计算两个数的最大公约数。2.分析3.实例点我看答案#定义一个函数defhcf(x,y):&quot;&quot;&quot;该函数返回两个数的最大公约数&quot;&quot;&quot;#获取最小值ifx&gt;y:smaller=yelse:smaller=xforiinrange(1,smaller+1):if((x%i==0)and(y%i==0)):hcf=ireturnhcf#用户输入两个数字num1=int(input(&quot;输入第一个数字:&quot;))num2=int(input(&quot;输入第二个数字:&quot;))print(num1,&quot;和&quot;,num2,&quot;的最大公约数为&quot;,hcf(num1,num2))"}, "md/exercise/114.html": {"url": "md/exercise/114.html", "title": "Python 3 练习 114", "keywords": "", "body": "Python练习1.题目编写一个程序，计算两个数的最小公倍数。2.分析3.实例点我看答案#定义函数deflcm(x,y):#获取最大的数ifx&gt;y:greater=xelse:greater=ywhile(True):if((greater%x==0)and(greater%y==0)):lcm=greaterbreakgreater+=1returnlcm#获取用户输入num1=int(input(&quot;输入第一个数字:&quot;))num2=int(input(&quot;输入第二个数字:&quot;))print(num1,&quot;和&quot;,num2,&quot;的最小公倍数为&quot;,lcm(num1,num2))"}, "md/exercise/115.html": {"url": "md/exercise/115.html", "title": "Python 3 练习 115", "keywords": "", "body": "Python练习1.题目编写一个猜数游戏，该游戏会随机产生一个整数（0-10），用户可以随意输入一个数进行比较，在比较过程中，会不断提示用户输入的数是大了还是小了，直到用户输入的数等于随机数，程序终止。2.分析3.实例点我看答案importrandomi=random.randint(0,10)whileTrue:s=int(input(&#x27;请输入一个整数&#x27;))ifs&gt;i:print(&quot;你猜的太大了&quot;)elifs&lt;i:print(&quot;你猜的太小了&quot;)else:print(&quot;你猜对了&quot;)break"}, "md/exercise/116.html": {"url": "md/exercise/116.html", "title": "Python 3 练习 116", "keywords": "", "body": "Python练习1.题目古代有一个梵塔，塔内有A、B、C三个基座，A座上有64个盘子，盘子大小不等，大的在下，小的在上。有人想把这64个盘子从A座移到C座，但每次只允许移动一个盘子，并且在移动的过程中，3个基座上的盘子始终保持大盘在下，小盘在上。在移动过程中盘子可以放在任何一个基座上，不允许放在别处。编写程序，用户输入盘子的个数，显示移动的过程。2.分析假定盘子从大到小依次编号为：盘1、盘2、…如果只有一个盘子，则不需要利用B座，直接将盘子从A移动到C如果有2个盘子，可以先将盘2移动到B，将盘1移动到C后，再将盘2移动到C如果有3个盘子，那么根据2个盘子的结论，可以借助C将盘2和盘3从A移动到B，将盘1从A移动到C，A变成空座；借助A座，将B上的两个盘子移动到C上述思路可以一直扩展下去，根据以上的分析，可以写出下面的递归表达：将一个盘子从A移动到C借助C将n-1个盘子从A移动到B将一个盘子从A移动到Cn&gt;1借助A将n-1个盘子从B移动到C借助B将n个盘子从A移动到C为了编写一个递归函数实现借助B将n个盘子从A移到C，比较等式左右两边相似操作，会发现：盘子的数量从n变化到n-1，问题规模缩小了，显然n是一个可变的参数盘子的起始位置是变化的，等式左侧是A，右侧是A或B盘子的最终位置是变化的，等式左侧是C、右侧是B或C同样被借助的位置也是变化的因此，递归函数共有盘子数、起始位置、借助位置和最终位置4个变量，因此函数有4个可变参数。3.实例点我看答案defHanoi(n,ch1,ch2,ch3):ifn==1:print(ch1,&#x27;-&gt;&#x27;,ch3)else:Hanoi(n-1,ch1,ch3,ch2)print(ch1,&#x27;-&gt;&#x27;,ch3)Hanoi(n-1,ch2,ch1,ch3)N=int(input(&quot;请输入盘子的数量：&quot;))Hanoi(N,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;)10"}, "md/exercise/117.html": {"url": "md/exercise/117.html", "title": "Python 3 练习 117", "keywords": "", "body": "Python练习1.题目用户输入位数n，找出并显示出所有n位的自幂数。2.分析自幂数是指一个n位正整数，如果它的各位数字的n次方的和加起来等于这个数，数学家称这样的数为自幂数。例如，13+53+33=153，153就是一个3位的自幂数，3位自幂数也称为水仙花数。本程序设n的数值为1~6，当n大于6时，程序退出。3.实例点我看答案#自幂数start=0end=0digit=0m=0n=int(input(&#x27;请选择自幂数的位数【1，2，3，4，5，6】:&#x27;))while0&lt;n&lt;7:start=pow(10,n-1)end=pow(10,n)-1print(n,&#x27;位数的自幂数有:&#x27;)forkinrange(start,end+1):m=ktotal=0whilem!=0:digit=m%10total+=pow(digit,n)m=m//10iftotal==k:print(str(k),end=&#x27;&#x27;)n=int(input(&#x27;\\n请选择自幂数的位数【1，2，3，4，5，6】:&#x27;))else:print(&#x27;输入位数不在范围内,程序结束。&#x27;)"}, "md/exercise/118.html": {"url": "md/exercise/118.html", "title": "Python 3 练习 118", "keywords": "", "body": "Python练习1.题目哥德巴赫猜想说是说，任何一个超过2的偶数都可以写成两个素数之和例如，4=2+2，8=5+3等。本例要求根据用户输入的偶数找出其素数和的分解形式2.分析一个简单的方法的，对于输入的偶数N，找出其所有分解，逐一验证每一个满足N=k1+k2的分解中k1和k2是否都是素数。比如对于数字12，验证分解（2，10），（3，9）、（4，8）、（5、7）、（6，6）中有没有两个数都是素数的情形。如果有，哥德巴赫猜想该数就是成立的。这种算法对于只验证一个数字N的所有分解的情形是合适的。但对于需要验证多个偶数N的情形效率欠佳。比如需要验证10、12、16三个数，它们有分解5+5、5+7、5+11，这样验证这几个分解时就要判断5是不是素数，重复的运算会很多。本案例采用另一种思路，首先建立一个素数表，该素数表要足够长，可以覆盖偶数N所有分解中可能遇到的素数。而后考察N的每个分解，看看分解出来的两个数是否都包含在素数表中，若是，则找到一种素数分解。3.实例点我看答案defmain():#输入待验证的偶数N=int(input(&quot;请输入待验证的偶数：&quot;))whileN&lt;3orN%2==1:print(&quot;输入的数不符合要求&quot;)N=int(input(&quot;请输入待验证的偶数n（n&gt;2）：&quot;))#生成素数表Prime=set()foriinrange(2,N+1):Prime.add(i)foriinrange(2,N+1):ifiinPrime:forkinrange(2*i,N+1,i):ifkinPrime:Prime.remove(k)#验证该偶数能否分解为两个素数之和foreinPrime:f=N-eiff&gt;=eandfinPrime:print(N,&#x27;=&#x27;,e,&#x27;+&#x27;,f)main()"}, "md/exercise/119.html": {"url": "md/exercise/119.html", "title": "Python 3 练习 119", "keywords": "", "body": "Python练习1.题目输入直角三角形的两个直角边长度a、b，求斜边c的长度。数学公式c=√(a2+b2)2.分析在Python中，乘法使用*号表示，如a*a就是a的平方。除此之外，还有开方根的运算，可以通过Python中math模块内置的函数来实现，为此，我们可以在程序中使用import导入math模块，然后调用开方的函数sqrt实现。3.实例点我看答案frommathimport*a=float(input(&quot;请输入斜边1的长度&quot;))#输入实数b=float(input(&quot;请输入斜边2的长度&quot;))#输入实数c=a*a+b*b#计算,得到的是斜边的平方c=sqrt(c)#开方，得到的是斜边长print(&quot;斜边长为:&quot;,c)#显示，一项是字符串，一项是c表示的斜边长"}, "md/exercise/120.html": {"url": "md/exercise/120.html", "title": "Python 3 练习 120", "keywords": "", "body": "Python练习1.题目有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第3个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第1个人，他说是10岁。请问第五个人多大？2.分析题目非常符合递归函数的过程，所以本题采用递归函数完成。函数把问到的第几个人作为参数i，当i的值为1时，函数返回10，其它情况均为第i-1人年龄的基础上加2.3.实例点我看答案deffun(i):ifi==1:return10returnfun(i-1)+2print(fun(5))"}, "md/exercise/121.html": {"url": "md/exercise/121.html", "title": "Python 3 练习 121", "keywords": "", "body": "Python练习1.题目线性查找2.分析线性查找就是从头找到尾，直到符合条件了就返回。比如在一个list中找到一个等于5的元素并返回下标：3.实例点我看答案number_list=[0,1,2,3,4,5,6,7]deflinear_search(value,iterable):forindex,valinenumerate(iterable):ifval==value:returnindexreturn-1print(linear_search(5,number_list))"}, "md/exercise/122.html": {"url": "md/exercise/122.html", "title": "Python 3 练习 122", "keywords": "", "body": "Python练习1.题目二分查找2.分析假如一个序列已经有序了呢，我们还需要从头找到尾吗？当然不用，折半（二分）是一种经典思想。3.实例点我看答案defbinary_search(sorted_array,val):ifnotsorted_array:return-1beg=0end=len(sorted_array)-1whilebeg&lt;=end:mid=int((beg+end)/2)ifsorted_array[mid]==val:returnmidelifsorted_array[mid]&gt;val:end=mid-1else:beg=mid+1return-1a=list(range(10))#正常值print(binary_search(a,1))print(binary_search(a,-1))#边界值print(binary_search(a,0))"}, "md/exercise/123.html": {"url": "md/exercise/123.html", "title": "Python 3 练习 123", "keywords": "", "body": "Python练习1.题目假如有10个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好。于是他开始喊口号，每喊一次，从第一个小盆友开始，相邻的小朋友如果身高不是正序就会两两调换，就这样第一轮个头最高的排到了最右边。（冒泡到最右边）第二轮依次这么来，从第一个小朋友开始两两交换，这样次高的小盆友又排到了倒数第二个位置。依次类推。2.分析冒泡排序3.实例点我看答案importrandomdefbubble_sort(seq):#O(n^2),n(n-1)/2=1/2(n^2+n)n=len(seq)foriinrange(n-1):forjinrange(n-1-i):#这里之所以n-1还需要减去i是因为每一轮冒泡最大的元素都会冒泡到最后，无需再比较ifseq[j]&gt;seq[j+1]:seq[j],seq[j+1]=seq[j+1],seq[j]#我打印出来让你看清楚每一轮最高、次高、次次高...的小朋友会冒泡到右边print(f&quot;第{i+1}轮：&quot;,seq)print(&quot;结果：&quot;,seq)#注意python3返回迭代器，所以我都用list强转了，python2range返回的就是listseq=list(range(10))#shuffleinplace操作，打乱数组random.shuffle(seq)print(&quot;原始：&quot;,seq)bubble_sort(seq)"}, "md/exercise/124.html": {"url": "md/exercise/124.html", "title": "Python 3 练习 124", "keywords": "", "body": "Python练习1.题目假如有10个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好。从头到尾找一个个头最小的小盆友，然后把它和第一个小盆友交换。然后从第二个小盆友开始采取同样的策略，这样一圈下来小盆友就有序了。2.分析选择排序3.实例点我看答案importrandomdefselect_sort(seq):n=len(seq)foriinrange(n-1):#我们假设当前下标的元素是最小的min_idx=iforjinrange(i+1,n):#从i的后边开始找到最小的元素，得到它的下标ifseq[j]&lt;seq[min_idx]:#一个j循环下来之后就找到了最小的元素它的下标min_idx=jifmin_idx!=i:#swapseq[i],seq[min_idx]=seq[min_idx],seq[i]print(f&quot;第{i+1}轮：&quot;,seq)print(&quot;结果：&quot;,seq)seq=list(range(10))random.shuffle(seq)print(&quot;原始：&quot;,seq)select_sort(seq)"}, "md/exercise/125.html": {"url": "md/exercise/125.html", "title": "Python 3 练习 125", "keywords": "", "body": "Python练习1.题目A=[23,25,44,66,45,334,556]计算列表A中的元素两两相减的差值2.分析第3个元素-第2个元素，第2个元素-第1个元素得出差值列表3.实例点我看答案A=[23,25,44,66,45,334,556]L=[A[i]-A[i-1]foriinrange(len(A)-1,0,-1)]print(L)"}, "md/exercise/126.html": {"url": "md/exercise/126.html", "title": "Python 3 练习 126", "keywords": "", "body": "Python练习1.题目有一对兔子，从出生后第4个月起每个月都生一对兔子，小兔子长到第4个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？2.分析按照兔子成长轨迹来计算3.实例点我看答案a={1:1,2:0,3:0}foriinrange(1,22):print(f&#x27;{i}{sum(a.values())}{a}&#x27;)tmp=a[3]a[3]+=a[2]a[2]=a[1]a[1]=tmp"}, "md/exercise/127.html": {"url": "md/exercise/127.html", "title": "Python 3 练习 127", "keywords": "", "body": "Python练习1.题目找出[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;a&#x27;]当中重复的元素和位置2.分析3.实例点我看答案a=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;a&#x27;,&#x27;c&#x27;]b=[(x,y)forx,yinenumerate(a)ifa.count(y)&gt;1]print(b)"}, "md/questions/index.html": {"url": "md/questions/index.html", "title": "面试题", "keywords": "", "body": "面试题对常见Python面试题进行梳理"}, "md/questions/001.html": {"url": "md/questions/001.html", "title": "试题 001", "keywords": "", "body": "Python面试题什么是Python，使用它有什么好处，你对PEP8有什么了解？点我看答案Python是最成功的解释语言之一。编写Python脚本时，不需要在执行之前编译。Python编程的好处Python是一种动态类型语言。这意味着无需在声明过程中提及变量的数据类型。它允许设置变量，如var1=101和var2=&quot;abc&quot;没有任何错误。Python支持面向对象的编程，可以定义类以及组合和继承。它不使用访问说明符，如public或private。Python中的函数就像第一类对象。可以将它们分配给变量，从其他方法返回并作为参数传递。使用Python进行开发很快，但运行它通常比编译语言慢。幸运的是，Python允许包含C语言扩展，因此可以优化脚本。Python有几个用途，如基于Web的应用程序，自动化测试，数据建模，大数据分析等等。可以将其用作粘合图层以与其他语言一起使用。PEP8PEP8是最新的Python编码标准，是一组编码建议。它指导提供更易读的Python代码。"}, "md/questions/002.html": {"url": "md/questions/002.html", "title": "试题 002", "keywords": "", "body": "Python面试题以下Python代码片段的输出是什么？证明你的答案。defextendList(val,list=[]):list.append(val)returnlistlist1=extendList(10)list2=extendList(123,[])list3=extendList(&#x27;a&#x27;)print(f&quot;list1={list1}&quot;)print(f&quot;list2={list2}&quot;)print(f&quot;list3={list3}&quot;)点我看答案上面的Python代码片段的结果是：list1=[10,&#x27;a&#x27;]list2=[123]list3=[10,&#x27;a&#x27;]可能错误地期望list1等于[10]而list3与[&#x27;a&#x27;]匹配，认为每次调用extendList时list参数都会初始化为其默认值[]。但是，运行流程就像在定义函数后创建一个新列表一样。只要有人在没有list参数的情况下调用extendList方法，就会使用相同的方法。它的工作方式与此类似，因为表达式（在默认参数中）的计算发生在函数定义时，而不是在调用期间。因此，list1和list3在相同的默认列表上运行，而list2在它自己创建的单独对象上运行（通过将空列表作为list参数的值传递）。extendList函数的定义可以通过以下方式更改。defextendList(val,list=None):iflistisNone:list=[]list.append(val)returnlist通过这个修订后的实现，输出将是：list1=[10]list2=[123]list3=[&#x27;a&#x27;]"}, "md/questions/003.html": {"url": "md/questions/003.html", "title": "试题 003", "keywords": "", "body": "Python面试题如果程序不需要操作但需要语法，那么Python中可以使用的语句是什么？点我看答案pass语句是一个null操作。它执行时什么也没发生。您应该使用小写的pass关键字。如果你写Pass，你将面临一个错误，如NameError：namePassnotdefined.Python语句区分大小写。letter=&quot;hai&quot;foriinletter:ifi==&quot;a&quot;:passprint(&quot;pass语句执行..............&quot;)else:print(i)"}, "md/questions/004.html": {"url": "md/questions/004.html", "title": "试题 004", "keywords": "", "body": "Python面试题在Python中使用〜获取主目录的过程是什么？点我看答案你需要导入os模块，然后只需一行就能完成剩下的工作。importosprint(os.path.expanduser(&#x27;~&#x27;))输出：/home/liushi"}, "md/questions/005.html": {"url": "md/questions/005.html", "title": "试题 005", "keywords": "", "body": "Python面试题Python中有哪些内置类型？点我看答案Python的不可变内置数据类型数字字符串元组Python的可变内置数据类型列表字典集合"}, "md/questions/006.html": {"url": "md/questions/006.html", "title": "试题 006", "keywords": "", "body": "Python面试题如何在Python应用程序中查找错误或执行静态分析？点我看答案可以使用PyChecker，它是一个静态分析器。它识别Python项目中的错误，并揭示风格和复杂性相关的错误。另一个工具是Pylint，它检查Python模块是否满足编码标准。"}, "md/questions/007.html": {"url": "md/questions/007.html", "title": "试题 007", "keywords": "", "body": "Python面试题Python装饰器何时使用？点我看答案Python装饰器是在Python语法中进行的相对更改，可以快速调整功能。"}, "md/questions/008.html": {"url": "md/questions/008.html", "title": "试题 008", "keywords": "", "body": "Python面试题列表和元组之间的主要区别是什么？点我看答案列表和元组之间的主要区别在于前者是可变的而元组不是。"}, "md/questions/009.html": {"url": "md/questions/009.html", "title": "试题 009", "keywords": "", "body": "Python面试题Python如何处理内存管理？点我看答案Python使用私有堆来维护其内存。所以堆包含所有Python对象和数据结构。这个区域只能由Python解释器访问；程序员不能使用它。它是处理私有堆的Python内存管理器。它为Python对象执行所需的内存分配。Python使用内置的垃圾收集器，它可以挽救所有未使用的内存并将其卸载到堆空间。"}, "md/questions/010.html": {"url": "md/questions/010.html", "title": "试题 010", "keywords": "", "body": "Python面试题Lambda和Def之间的主要区别是什么？点我看答案当Lambda是uni-expression函数，Def可以包含多个表达式。Def生成一个函数并指定一个名称以便稍后调用它。Lambda形成一个函数对象并返回它。Def可以有一个return语句。Lambda不能有return语句。Lambda支持在列表和字典中使用。"}, "md/questions/011.html": {"url": "md/questions/011.html", "title": "试题 011", "keywords": "", "body": "Python面试题编写一个Reg表达式，使用PythonReg表达式模块Re确认电子邮件ID？点我看答案Python有一个正则表达式模块re。编写可以检查.com和.co.in子域的电子邮件ID的re表达式。importreprint(re.search(r&quot;[0-9a-zA-Z.]+@[a-zA-Z]+\\.(com|co\\.in)$&quot;,&quot;liushi.live@outlook.com&quot;))"}, "md/questions/012.html": {"url": "md/questions/012.html", "title": "试题 012", "keywords": "", "body": "Python面试题以下代码片段的输出是什么？代码中有错误吗？list=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]print(list[10:])点我看答案上面代码行的结果是[]。不会出现像IndexError这样的错误。尝试使用超过成员计数的索引从列表中获取成员（例如，尝试访问问题中给出的list[10]）将产生IndexError。顺便说一下，只检索超过no的起始索引处的范围引用。列表中的项目不会导致IndexError。它只会返回一个空列表。"}, "md/questions/013.html": {"url": "md/questions/013.html", "title": "试题 013", "keywords": "", "body": "Python面试题Python中是否有Switch或Case语句？如果不是那么原因是什么？点我看答案Python没有Switch语句，但可以编写Switch函数然后使用它。"}, "md/questions/014.html": {"url": "md/questions/014.html", "title": "试题 014", "keywords": "", "body": "Python面试题Python用于迭代数字序列的内置函数是什么？点我看答案range()生成一个数字列表，用于迭代for循环。foriinrange(5):print(i)range()函数有两组参数。range(stop)stop：整数生成并从零开始。例如。range(3)==[0,1,2]。range(start,stop[,step])start：这是开始的序列。stop：指定序列的上限。step：步长是生成序列的递增因子。注意事项：只允许整数参数。参数可以是正数或负数。Python中的range()函数从第零个索引开始。"}, "md/questions/015.html": {"url": "md/questions/015.html", "title": "试题 015", "keywords": "", "body": "Python面试题Python中try-except块内可能的可选语句是什么？点我看答案可以在try-except块中使用两个可选子句。else如果想在try块没有创建异常时运行一段代码，这将非常有用。finally当您想要执行某些运行步骤时，无论是否发生异常，它都很有用。"}, "md/questions/016.html": {"url": "md/questions/016.html", "title": "试题 016", "keywords": "", "body": "Python面试题Python中的字符串是什么？点我看答案Python中的字符串是一个字母数字字符序列。它们是不可变的对象。这意味着一旦获得值，他们就不允许修改。Python提供了几种方法，例如join()、replace()、split()来改变字符串。但这些都不会改变原始对象。"}, "md/questions/017.html": {"url": "md/questions/017.html", "title": "试题 017", "keywords": "", "body": "Python面试题Python中的范围引用（切片）是什么？点我看答案Slicing是一个字符串操作，用于提取字符串的一部分或列表的某些部分。在Python中，字符串（比如文本）从索引0开始，第n个字符存储在位置文本[n-1]。Python也可以在负数的帮助下执行反向索引，即向后方向。在Python中，slice()也是一个生成切片对象的构造函数。slice()方法允许三个参数。start-开始切片的起始编号。stop-表示切片结束的数字。step-每个索引后递增的值（默认值=1）。"}, "md/questions/018.html": {"url": "md/questions/018.html", "title": "试题 018", "keywords": "", "body": "Python面试题Python中的％S是什么？点我看答案Python支持将任何值格式化为字符串。它可能包含非常复杂的表达式。常见的用法之一是使用％s格式说明符将值推送到字符串中。Python中的格式化操作具有与C函数printf相同的语法。"}, "md/questions/019.html": {"url": "md/questions/019.html", "title": "试题 019", "keywords": "", "body": "Python面试题Python中的字符串是不可变的还是可变的？点我看答案Python字符串确实是不可变的。我们有一个包含字符串值的str变量。我们不能改变容器，即字符串，但可以修改它包含的含义，即变量的值。"}, "md/questions/020.html": {"url": "md/questions/020.html", "title": "试题 020", "keywords": "", "body": "Python面试题Python中的索引是什么？点我看答案索引是整数数据类型，表示有序列表或字符串中的位置。在Python中，字符串也是字符序列。我们可以使用从零开始并且长度减去1的索引来访问它们。例如，在字符串Program中，索引发生如下：Program012345"}, "md/questions/021.html": {"url": "md/questions/021.html", "title": "试题 021", "keywords": "", "body": "Python面试题Python中的Docstring是什么？点我看答案docstring是一个唯一的文本，恰好是以下Python结构中的第一个语句：模块，函数，类或方法定义。docstring被添加到字符串对象的__doc__属性中。"}, "md/questions/022.html": {"url": "md/questions/022.html", "title": "试题 022", "keywords": "", "body": "Python面试题Python编程中的函数是什么？点我看答案函数是表示代码块并且是可重用实体的对象。它为程序带来了模块化，并提供了更高程度的代码可重用性。Python为我们提供了许多内置函数，例如print()，并提供了创建用户定义函数的能力。"}, "md/questions/023.html": {"url": "md/questions/023.html", "title": "试题 023", "keywords": "", "body": "Python面试题Python中有多少基本类型的函数可用？点我看答案Python为我们提供了两种基本类型的函数。内置自定义内置函数是Python语言的一部分。其中一些是print()，len和abs()等。"}, "md/questions/024.html": {"url": "md/questions/024.html", "title": "试题 024", "keywords": "", "body": "Python面试题如何在Python中编写函数？点我看答案可以通过以下方式创建Python函数。使用关键字def，紧跟着函数名称。可以传递参数并使用括号将它们括起来。最后，冒号标记了函数头的结尾。按回车后，可以添加所需的Python语句来执行。"}, "md/questions/025.html": {"url": "md/questions/025.html", "title": "试题 025", "keywords": "", "body": "Python面试题Python中的函数调用或可调用对象是什么？点我看答案Python中的函数被视为可调用对象。它可以允许一些参数，并以元组的形式返回一个值或多个值。除了函数之外，Python还有其他构造，例如类或适合同一类别的类实例。"}, "md/questions/026.html": {"url": "md/questions/026.html", "title": "试题 026", "keywords": "", "body": "Python面试题Python中使用的return关键字是什么？点我看答案函数的目的是接收输入并返回一些输出。返回是一个Python语句，我们可以在函数中使用它来将值发送回其调用者。"}, "md/questions/027.html": {"url": "md/questions/027.html", "title": "试题 027", "keywords": "", "body": "Python面试题Python函数是否必须返回一个值？点我看答案函数根本不需要返回任何值。但是，如果需要，我们可以使用None作为返回值。"}, "md/questions/028.html": {"url": "md/questions/028.html", "title": "试题 028", "keywords": "", "body": "Python面试题Python中的continue做什么？点我看答案continue是Python中的一个跳转语句，它将控件移动到循环中执行下一次迭代，使块中的所有剩余指令不执行。continue语句适用于while和for循环。"}, "md/questions/029.html": {"url": "md/questions/029.html", "title": "试题 029", "keywords": "", "body": "Python面试题Python中id()函数的用途是什么？点我看答案id()是Python中的内置函数之一。Signature:id(object)它允许一个参数并返回目标对象的标识。这种身份在生命周期中是独一无二的。"}, "md/questions/030.html": {"url": "md/questions/030.html", "title": "试题 030", "keywords": "", "body": "Python面试题*args在Python函数定义中做了什么？点我看答案我们使用*args作为函数头中的参数。它使我们能够传递N（可变）数量的参数。请注意，此类参数语法不允许将关键字参数传递给函数。使用*args的示例：deff1(*args):print(type(args))print(args)f1(1,2,3,4)输出：&lt;class&#x27;tuple&#x27;&gt;(1,2,3,4)"}, "md/questions/031.html": {"url": "md/questions/031.html", "title": "试题 031", "keywords": "", "body": "Python面试题**args在Python函数定义中做了什么？点我看答案我们使用**args作为函数头中的参数。它使我们能够传递N（可变）数量的关键字参数。使用*args的示例：deff2(**alls):print(type(alls))print(alls)f2(a=1,b=2)输出：&lt;class&#x27;dict&#x27;&gt;{&#x27;a&#x27;:1,&#x27;b&#x27;:2}"}, "md/questions/032.html": {"url": "md/questions/032.html", "title": "试题 032", "keywords": "", "body": "Python面试题Python有一个main()方法吗？点我看答案main()是入口点函数，在大多数编程语言中首先调用。由于Python是基于解释器的，因此它逐个顺序执行代码行。Python也有一个main()方法。但是每当我们运行Python脚本时，只要直接单击它或从命令行启动它就会执行它。我们还可以使用Pythonif语句覆盖Python默认的main()函数。请参阅以下代码。print(&quot;欢迎&quot;)print(&quot;__name__contains:&quot;,__name__)defmain():print(&quot;测试主函数&quot;)if__name__==&#x27;__main__&#x27;:main()输出：欢迎__name__contains:__main__测试主函数"}, "md/questions/033.html": {"url": "md/questions/033.html", "title": "试题 033", "keywords": "", "body": "Python面试题__name__在Python中做什么？点我看答案__name__是一个唯一变量。由于Python没有公开main()函数，所以当它的解释器运行脚本时，它首先执行0级缩进的代码。要查看main()是否被调用，我们可以在if子句中使用__name__变量与值__main__进行比较。"}, "md/questions/034.html": {"url": "md/questions/034.html", "title": "试题 034", "keywords": "", "body": "Python面试题Python中print()函数end参数的目的是什么？点我看答案Python的print()函数总是在最后打印一个换行符。print()函数接受一个称为end的可选参数。默认值为\\n。可以使用此参数更改print语句中的结束字符。"}, "md/questions/035.html": {"url": "md/questions/035.html", "title": "试题 035", "keywords": "", "body": "Python面试题什么时候应该在Python中使用break？点我看答案Python提供了一个break语句来退出循环。每当中断在代码中命中时，程序的控制立即从循环体中退出。嵌套循环中的break语句导致控件退出内部迭代块。"}, "md/questions/036.html": {"url": "md/questions/036.html", "title": "试题 036", "keywords": "", "body": "Python面试题Python中pass和continue有什么区别？点我看答案continue语句使循环从下一次迭代中恢复。相反，pass语句指示什么都不做，代码的其余部分像往常一样执行。"}, "md/questions/037.html": {"url": "md/questions/037.html", "title": "试题 037", "keywords": "", "body": "Python面试题len()函数在Python中有什么作用？点我看答案在Python中，len()是主要的字符串函数。它确定输入字符串的长度。&gt;&gt;&gt;some_string=&#x27;techbeamers&#x27;&gt;&gt;&gt;len(some_string)11"}, "md/questions/038.html": {"url": "md/questions/038.html", "title": "试题 038", "keywords": "", "body": "Python面试题Python中的rstrip()是什么？点我看答案Python提供了rstrip()方法，该方法复制了字符串，但是从末尾省略了空白字符。rstrip()根据参数值从右端转义字符，即提示要排除的字符组的字符串。rstrip()的签名是：str.rstrip(chars=None)"}, "md/questions/039.html": {"url": "md/questions/039.html", "title": "试题 039", "keywords": "", "body": "Python面试题Python中的空格是什么？点我看答案空格表示我们用于间距和分隔的字符。在Python中，它可以是制表符或空格。"}, "md/questions/040.html": {"url": "md/questions/040.html", "title": "试题 040", "keywords": "", "body": "Python面试题如何在Python中使用split()函数？点我看答案Python的split()函数适用于字符串，可将大块剪切成较小的块或子字符串。我们可以指定一个分隔符来开始拆分，或者默认情况下使用空格。str=&#x27;pdfcsvjson&#x27;print(str.split(&quot;&quot;))print(str.split())输出：[&#x27;pdf&#x27;,&#x27;csv&#x27;,&#x27;json&#x27;][&#x27;pdf&#x27;,&#x27;csv&#x27;,&#x27;json&#x27;]"}, "md/questions/041.html": {"url": "md/questions/041.html", "title": "试题 041", "keywords": "", "body": "Python面试题Python语言中的GIL是什么？点我看答案Python支持GIL（全局解释器锁），它是一个互斥体，用于保护对Python对象的访问，同时使多个线程同步运行Python字节码。"}, "md/questions/042.html": {"url": "md/questions/042.html", "title": "试题 042", "keywords": "", "body": "Python面试题Python线程如何安全？点我看答案Python确保安全访问线程。它使用GIL互斥锁来设置同步。如果一个线程在任何时候失去GIL锁定，那么你必须使代码线程安全。"}, "md/questions/043.html": {"url": "md/questions/043.html", "title": "试题 043", "keywords": "", "body": "Python面试题Python如何管理内存？点我看答案Python在内部实现了一个堆管理器，它包含所有对象和数据结构。此堆管理器为对象分配/取消分配堆空间。"}, "md/questions/044.html": {"url": "md/questions/044.html", "title": "试题 044", "keywords": "", "body": "Python面试题Python中的元组是什么？点我看答案元组是Python中的集合类型数据结构，它是不可变的。它们与序列类似，就像列表一样。但是，元组和列表之间存在一些差异；前者不允许修改，而列表则允许修改。此外，元组使用括号括起来，但列表的语法中有方括号。"}, "md/questions/045.html": {"url": "md/questions/045.html", "title": "试题 045", "keywords": "", "body": "Python面试题Python编程中的字典是什么？点我看答案字典是一种在Python中称为关联数组的数据结构，它存储一组对象。该集合是一组具有单个关联值的键。我们可以将其称为散列，映射或散列映射，因为它在其他编程语言中被调用。"}, "md/questions/046.html": {"url": "md/questions/046.html", "title": "试题 046", "keywords": "", "body": "Python面试题Python中的Set是什么？点我看答案集合是Python中的无序集合对象。它们存储唯一且不可变的对象。Python中集合的实现源自数学。"}, "md/questions/047.html": {"url": "md/questions/047.html", "title": "试题 047", "keywords": "", "body": "Python面试题Python列表是一个链表吗？点我看答案Python列表是一个可变长度数组，它与C风格的链表不同。在内部，它有一个连续的数组，用于引用其他对象，并在列表头结构中存储指向数组变量及其长度的指针。"}, "md/questions/048.html": {"url": "md/questions/048.html", "title": "试题 048", "keywords": "", "body": "Python面试题Python中的什么是类？点我看答案Python支持面向对象的编程，并且与OOP完全兼容。Python类是创建对象的蓝图。它定义成员变量并获取与它们相关联的行为。我们可以使用关键字class来创建它。从构造函数创建一个对象。此对象表示类的实例。在Python中，我们以下列方式生成类和实例。&gt;&gt;&gt;classHuman(object):#创建一个类...pass&gt;&gt;&gt;man=Human()#创建一个实例&gt;&gt;&gt;print(man)&lt;__main__.Humanobjectat0x0000000003559E12&gt;"}, "md/questions/049.html": {"url": "md/questions/049.html", "title": "试题 049", "keywords": "", "body": "Python面试题Python类中的属性和方法是什么？点我看答案如果一个类没有定义任何功能，那么它就没用了。我们可以通过添加属性来实现。它们作为数据和功能的容器。我们可以直接在类体内添加一个属性。&gt;&gt;&gt;classHuman(object):...profession=&quot;programmer&quot;#指定类的属性profession&gt;&gt;&gt;man=Human()&gt;&gt;&gt;print(man.profession)programmer添加属性后，我们可以继续定义函数。通常，我们称它们为方法。在方法签名中，我们总是必须提供带有self-keyword的第一个参数。&gt;&gt;&gt;classHuman(object):profession=&quot;programmer&quot;defset_profession(self,new_profession):self.profession=new_profession&gt;&gt;&gt;man=Human()&gt;&gt;&gt;man.set_profession(&quot;Manager&quot;)&gt;&gt;&gt;print(man.profession)Manager"}, "md/questions/050.html": {"url": "md/questions/050.html", "title": "试题 050", "keywords": "", "body": "Python面试题如何在运行时为Class属性赋值？点我看答案我们可以在运行时指定属性的值。我们需要添加一个__init__方法并将输入传递给对象构造函数。请参阅以下示例演示此操作。&gt;&gt;&gt;classHuman(object):def__init__(self,profession):self.profession=professiondefset_profession(self,new_profession):self.profession=new_profession&gt;&gt;&gt;man=Human(&quot;Manager&quot;)&gt;&gt;&gt;print(man.profession)Manager"}, "md/questions/051.html": {"url": "md/questions/051.html", "title": "试题 051", "keywords": "", "body": "Python面试题Python编程中的继承是什么？点我看答案继承使对象从另一个对象派生，并允许后者使用父对象的功能，就像它们自己的一样。我们有意地抽象出不同类中的类似代码。公共的代码将驻留在基类中，而另一个对象现在将从父类继承。看看下面的例子。classPC(object):#基类processor=&quot;Xeon&quot;#公共属性defset_processor(self,new_processor):processor=new_processorclassDesktop(PC):#派生类os=&quot;MacOSHighSierra&quot;#个性化属性ram=&quot;32GB&quot;classLaptop(PC):#派生类os=&quot;Windows10Pro64&quot;#个性化属性ram=&quot;16GB&quot;desk=Desktop()print(desk.processor,desk.os,desk.ram)lap=Laptop()print(lap.processor,lap.os,lap.ram)输出XeonMacOSHighSierra32GBXeonWindows10Pro6416GB"}, "md/questions/052.html": {"url": "md/questions/052.html", "title": "试题 052", "keywords": "", "body": "Python面试题Python程序中的错误和异常是什么？点我看答案错误是程序中的编码问题，可能导致异常退出。相反，由于发生中断程序正常流程的外部事件而发生异常。"}, "md/questions/053.html": {"url": "md/questions/053.html", "title": "试题 053", "keywords": "", "body": "Python面试题什么是Python生成器？点我看答案Generator是一种函数，它允许我们指定一个充当迭代器的函数，因此可以在for循环中使用。在生成器函数中，yield关键字替换return语句。deffn():return&quot;简单的Python函数&quot;defgenerate():yield&quot;Python生成器函数&quot;print(next(generate()))输出Python生成器函数"}, "md/questions/054.html": {"url": "md/questions/054.html", "title": "试题 054", "keywords": "", "body": "Python面试题Python中的闭包是什么？点我看答案Python闭包是另一个函数返回的函数对象。我们使用它们来消除代码冗余。在下面的例子中，我们编写了一个简单的闭包来乘以数字。defmultiply_number(num):defproduct(number):&quot;&quot;&quot;product()这里是一个闭包&quot;&quot;&quot;returnnum*numberreturnproductnum_2=multiply_number(2)print(num_2(11))print(num_2(24))num_6=multiply_number(6)print(num_6(1))输出22486"}, "md/questions/055.html": {"url": "md/questions/055.html", "title": "试题 055", "keywords": "", "body": "Python面试题Python中的装饰器是什么？点我看答案Python装饰器使我们能够动态地向给定对象添加新行为。在下面的示例中，编写了一个简单的示例，用于在函数执行前后显示消息。defdecorator_sample(func):defdecorator_hook(*args,**kwargs):print(&quot;Beforethefunctioncall&quot;)result=func(*args,**kwargs)print(&quot;在函数调用之后&quot;)returnresultreturndecorator_hook@decorator_sampledefproduct(x,y):returnx*yprint(product(3,3))输出在函数调用之前在函数调用之后9"}, "md/questions/056.html": {"url": "md/questions/056.html", "title": "试题 056", "keywords": "", "body": "Python面试题下面的代码有什么问题？deftestProc(n=[]):passtestProc([1,2,3])testProc()print(n)点我看答案上面的代码会抛出一个NameError。变量n是函数testProc的局部变量，不能在外部访问。因此，打印它是不可能的。"}, "md/questions/057.html": {"url": "md/questions/057.html", "title": "试题 057", "keywords": "", "body": "Python面试题定义一个函数，查找一个数列中的最大值和最小值，并一同返回。点我看答案defreturn_max_min(li):returnmax(li),min(li)li=[10,20,1,2,3,4,5]max_n,min_n=return_max_min(li)print(f&quot;最大值：{max_n}\\t最小值：{min_n}&quot;)"}, "md/questions/058.html": {"url": "md/questions/058.html", "title": "试题 058", "keywords": "", "body": "Python面试题定义一个函数，已知a是数列，列如a=[2,6,8...95,96,98]，求a中数值为奇数的总和点我看答案defodd_sum(li):tmp_list=[xforxinliifx%2!=0]returnsum(tmp_list)a=[2,6,8,9,11,12,13,95,96,98]print(f&quot;奇数总和：{odd_sum(a)}&quot;)"}, "md/questions/059.html": {"url": "md/questions/059.html", "title": "试题 059", "keywords": "", "body": "Python面试题图形代码.txt文件中保存了3条图形代码，其中有4个属性：名称、类别、时间、异常码0成功-1失败。要求用python文本读取的方式解答：求异常码失败的图形求平均时间返回各图形的名称提示：要把图形数据放在txt文本中将数据分割后转换相应的格式图形代码.txttest.jpg$result:sky$costtime:100$resultcode:0tedt2.jpg$result:cat$costtime:200$resultcode:0test3.jpg$result:$costtime:100$resultcode:-1点我看答案data=[]withopen(&quot;图形代码.txt&quot;,encoding=&quot;utf-8&quot;)asf:forlineinf:d={}名称,类别,时间,异常码=line.split(&quot;$&quot;)d[&quot;名称&quot;]=名称d[&quot;类别&quot;]=类别.split(&quot;:&quot;)[1]d[&quot;时间&quot;]=int(时间.split(&quot;:&quot;)[1].strip())d[&quot;异常码&quot;]=int(异常码.split(&quot;:&quot;)[1].strip())data.append(d)print(data)def求异常码失败的图形():L=[]fordindata:ifd[&quot;异常码&quot;]==-1:L.append(d[&quot;名称&quot;])returnLdef求平均时间():_i=0_sum=0fordindata:_sum+=d[&quot;时间&quot;]_i+=1return_sum/_idef返回各图形的名称():L=[]fordindata:L.append(d[&quot;名称&quot;])returnLprint(&quot;求异常码失败的图形&quot;,求异常码失败的图形())print(&quot;求平均时间&quot;,求平均时间())print(&quot;返回各图形的名称&quot;,返回各图形的名称())"}, "md/questions/060.html": {"url": "md/questions/060.html", "title": "试题 060", "keywords": "", "body": "Python面试题请按照以下3条规则计算1-99之和：小于或等于10的（如：1+2+...+10），全部相加；大于10的，如果十位数是偶数的，则计算他们之间的偶数之和（如：20+22+24+...+40+42+...+86+88）;如果十位数是奇数的，则求他们之间的奇数之和（如：11+13+...+97+99）。点我看答案sum1=0sum2=0sum3=0foriinrange(1,100):ifi&lt;=10:sum1+=ielifi&gt;10andi//10%2==0andi%2==0:sum2+=ielifi&gt;10andi//10%2!=0andi%2!=0:sum3+=iprint(sum1)print(sum2)print(sum3)"}, "md/questions/061.html": {"url": "md/questions/061.html", "title": "试题 061", "keywords": "", "body": "Python面试题参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。编程证明计算换门与否的概率点我看答案importrandomdefMontyHall(select,change):doors=[1,2,3]car=random.choice(doors)#主持人开一个不是车、没被选中的门left=[]fordindoors:ifd!=carandd!=select:left.append(d)open=random.choice(left)ifchange==1:select=6-open-selectreturnselect==carwin_change,win_nochange,win_randchange=0,0,0foriinrange(10000):select=random.randint(1,3)change=random.randint(0,1)win_randchange+=MontyHall(select,change)win_change+=MontyHall(select,1)win_nochange+=MontyHall(select,0)print(&#x27;不一定换门的中奖概率=&#x27;,win_randchange/10000)print(&#x27;换门的中奖概率=&#x27;,win_change/10000)print(&#x27;不换门中奖概率=&#x27;,win_nochange/10000)"}, "md/questions/062.html": {"url": "md/questions/062.html", "title": "试题 062", "keywords": "", "body": "Python面试题下列代码是否可正常运行？若不能，请修正num=5defprint_num():num+=1print(num)print_num()点我看答案赋值前引用了局部变量num，声明全局变量即可。num=5defprint_num():globalnumnum+=1print(num)print_num()"}, "md/questions/064.html": {"url": "md/questions/064.html", "title": "试题 064", "keywords": "", "body": "Python面试题请完善装饰器repeat函数代码，实现输入任意正整数，打印n次hello。defrepeat(num:int):pass@repeat(n)defprint_hello():print(&quot;hello&quot;)点我看答案defrepeat(num:int):defnew(old):foriinrange(num-1):old()returnoldreturnnew@repeat(n)defprint_hello():print(&quot;hello&quot;)"}, "md/questions/065.html": {"url": "md/questions/065.html", "title": "试题 065", "keywords": "", "body": "Python面试题给定数量不限的纸币，面值分别是25元、10元、5元、1元、请计算n元（n&gt;=1）所有的纸币组合方法，并用列表输出。如：5元时输出[1,1,1,1,1]、[5]点我看答案动态规划defcalculate(n:int,face_values:list):&quot;&quot;&quot;计算:paramn:需要计算的金额:paramface_values:面值集合:return:所有组合&quot;&quot;&quot;face_values.sort(reverse=True)results=[]forfaceinface_values:ifface&gt;n:continueifface==n:results.append(face)continue_result=[face]_n=n-face_face_values=face_values[face_values.index(face):]or[1]result=combination(_n,_face_values)results.append(_result+result)_face_values=face_values[face_values.index(face)+1:]or[1]whileresult:_result_start=result.pop(0)if_result_start==1:_result.append(_result_start)continueresult=combination(_result_start,_face_values)+resultresults.append(_result+result)returnresultsdefcombination(n,_face_values:list):&quot;&quot;&quot;面值组合:paramn:需要计算的金额:param_face_values:面值集合:return:所有组合&quot;&quot;&quot;ifn==1:return[1]result=[]forfacein_face_values:ifface&gt;=n:continueifn-face==0:result.extend((n,face))returnresultresult.append(face)result.extend(combination(n-face,_face_values))returnresultforiincalculate(26,[25,10,5,1]):print(i)"}}